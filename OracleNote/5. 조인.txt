1. 조인이 필요한 이유
    1) 만약 모든 데이터를 하나의 테이블에 저장한다면?
        - 데이터 중복
        - 갱신 이상
        - 삽입 이상
        - 삭제 이상
    2) 데이터베이스 설계할 때 정규화(Normalization)라는 과정을 거침 => 테이블을 최대한 나눈다
        - 데이터의 중복 최소화
        - 데이터의 일관성을 해치는 이상 현상들을 방지
        - 데이터를 논리적인 단위로 분리하는 과정
        - 예) USERS, PRODUCTS, ORDERS로 테이블을 나눈 것
    3) 잘 관리하기 위해서 흩어놓은 데이터에서 의미 있는 정보를 얻으려면, 이 흩어진 조각들을 다시 합쳐야만 함
        - 예) 어떤 고객이 어떤 상품을 주문했는지
                  ----      ----  ----
        - 분리된 테이블들을 다시 연결해야 함
         => 이 때 사용하는 기술이 바로 조인(JOIN)임

2. 내부 조인(Inner Join) -- Oracle 방식
    1) 두 테이블을 연결할 때 양쪽 테이블에 모두 공통으로 존재하는 데이터만을 결과로 보여줌
    2) 기준이 되는 컬럼의 값이 서로 일치하는 행들만 짝을 지어주는 것
        - 등가 조인(Equi Join)
    3) 문법
        SELECT 컬럼1, 컬럼2,....
        FROM 테이블A, 테이블B,....
        WHERE 테이블A.연결컬럼 = 테이블B.연결컬럼;
    4) 양쪽 테이블에 모두 존재하는 데이터만 결과로 보여줌
    5) 교집합(intersection)
        - NULL 값은 제외됨
    6) 가장 일반적인 조인 방식

3. 비등가 조인 (Non-Equi Join)
    1) 등호(=)가 아닌 다른 비교 연산자를 사용하는 경우
    2) 주로 사용되는 연산자
        - BETWEEN ~ AND
        - <, >, <=, >=
        - !=, <>
        - 범위 조건, 대소 비교가 필요한 경우 사용

4. 자체 조인 (Self Join)
    1) 같은 테이블을 마치 두 개의 서로 다른 테이블처럼 사용하는 조인
    2) 테이블 내에서 계층 구조나 관계를 표현할 때 사용
    3) 반드시 서로 다른 별칭(Alias)을 사용해야 함
    4) 주요 사용 사례
        - 조직도 (사원-매니저 관계)
        - 가족 관계 (부모-자식)
        - 제품 카테고리 (상위-하위 카테고리)

5. 외부 조인 (Outer Join)
    1) 요구사항 예시
        - 우리 쇼핑몰에 가입은 했지만 아직 한번도 주문하지 않은 고객은 누구일까?
        - 야심차게 출시했지만 아직 단 한번도 팔리지 않은 비운의 상품은 무엇일까?
    2) 외부 조인의 필요성
        - 내부 조인(Inner Join)으로는 주문 기록이 없는 고객을 찾을 수 없음
        - 이런 경우 외부 조인(Outer Join)이 필요함
        - 외부 조인을 사용하며 한쪽 테이블에만 존재하는 데이터도 결과에 포함시킬 수 있음
    3) 외부 조인
        - 두 테이블을 조인할 때 특정 테이블의 데이터는 ON 조건이 맞지 않더라도 모두 결과에 포함시키는 방법
        - 이 때 기준이 되는 테이블이 어느 쪽인가에 따라서
            - LEFT OUTER JOIN
            - RIGHT OUTER JOIN
        - 교집합 영역은 물론이고 기준이 되는 테이블의 데이터는 결과에 모두 포함됨

6. ANSI 표준 조인
    1) 문법 구조
        - SELECT 컬럼명
          FROM 테이블1 별칭1
          [LEFT | RIGHT | FULL] [OUTER] JOIN 테이블2 별칭2
          ON (조인 조건)