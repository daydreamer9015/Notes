1. OOP 단계별 접근
    1) step1 : 기본 변수, 개별 선언
    2) step2 : 배열 활용, 데이터 그룹화
    3) step3 : 클래스 도입, 객체 생성
    4) step4 : 객체 배열, 반복문 활용

2. 클래스가 필요한 이유
    1) 세상은 클래스와 객체로 이루어져 있음
        - 클래스와 객체라는 개념이 중요함
    2) 문제 : 쇼핑몰 물건 구매하는 프로그램 만들기
        - 요구사항
            - 첫번째 상품의 이름은 "상품 1 - 상품명: 아이폰17 | 가격: 1200000원 | 재고: 50개 | 카테고리 : 전자제품"
            - 두번째 상품의 이름은 "상품 2 - 상품명: 나이키 에어맥스 | 가격 : 150000원 |재고 : 30개 | 카테고리 : 신발"
    3) - 요구사항 추가됨
            - 상품이 늘어남 ==> 배열 사용
       - 배열 사용의 한계
            - 코드 변경을 최소화하는데는 성공함. 한 상품의 데이터가 4개의 배열에 나누어져 있음
            - 데이터를 변경할 때 매우 조심히 작업해야 함
            - 특정 상품의 데이터를 변경할 때 실수할 가능성이 매우 높음
            - 사람이 관리하기에는 좋은 코드가 아님 => 상품이라는 개념을 하나로 묶어서 관리해야 함. 클래스가 필요해짐
    4) 클래스 도입(배열이나 다른 클래스를 포함할 수 있음)
        - 클래스를 사용하여 상품이라는 개념을 만들고 상품별로 이름, 가격, 재고, 카테고리를 관리함
        - 클래스에 정의한 변수들
            - 멤버 변수(Member Variable)
                - 이 변수들은 특정 클래스에 소속된 멤버이기 때문에 이렇게 부름
            - 필드 (Field)
                - 데이터 항목을 가리키는 전통적인 용어
        - 클래스는 관례상 대문자로 시작하고 낙타 표기법을 사용함
            - 예) Product, MemberService

3. 클래스와 사용자 정의 타입
    1) 타입은 데이터의 종류나 형태를 나타냄
    2) Product라는 타입을 만듦
    3) 사용자가 직접 정의하는 사용자 정의 타입을 만들려면 설계도가 필요함
        - 이 설계도가 바로 클래스
    4) 설계도인 클래스를 사용해서 실제 메모리에 만들어진 실체를 객체 또는 인스턴스라고 함
    5) 클래스를 통해서 사용자가 원하는 종류의 데이터 타입을 원하는대로 정의할 수 있음
    6) 용어: 클래스, 객체, 인스턴스
        - 클래스는 설계도이고 이 설계도를 기반으로 실제 메모리에 만들어진 실체는 객체 또는 인스턴스라고 함
        - Product 클래스를 기반으로 iphone, sneakers 객체 또는 인스턴스가 만들어짐

4. 참조값 보관
    1) iphone = 0x001;      // Product 인스턴스 참조값 보관
    2) iphone = new Product();
        - 객체를 사용하려면 먼저 설계도인 클래스를 기반으로 객체(인스턴스)를 생성해야 함
        - new Product()
            - new는 새로 생성한다는 의미
            - Product 클래스 정보를 기반으로 새로운 객체를 생성하라는 의미
            - 이렇게 하면 메모리에 실제 Product 객체(인스턴스)를 생성함
            - Product 클래스는 String name, int price, int stock, String category 멤버 변수를 가지고 있음. 이 변수를 사용하는데 필요한 메모리 공간도 함께 확보함
    3) 객체를 생성하면 자바는 메모리 어딘가에 이 객체에 접근할 수 있는 참조값(주소)(0x001)을 반환함
        - new 키워드를 통해 객체가 생성되고 나면 참조값을 반환함
        - 이제 메모리에 존재하는 실제 Product 객체(인스턴스)의 참조값을 가지고 있음
        - 이 변수를 통해서 객체를 접근(참조)할 수 있음
    4) 참조값 확인
        - 예) clazz.Product@65ab7765
            - @앞은 패키지 + 클래스 정보
            - @뒤에 16진수 = 참조값

5. 객체 사용
    1) 클래스를 통해 생성한 객체를 사용하려면 먼저 메모리에 존재하는 객체에 접근해야 함
        - 객체에 접근하려면 .(점, dot)을 사용하면 됨
    2) 객체에 값 대입
    3) 객체 값 읽기

6. 클래스, 객체, 인스턴스 정리
    1) 클래스(Class)
        - 클래스는 객체를 생성하기 위한 '틀' 또는 '설계도'임
        - 클래스는 객체가 가져야 할 속성(변수)과 기능(메서드)를 정의함
        - 틀 : 붕어빵 틀. 실제 먹을 수 있는 것이 아님
        - 설계도 : 자동차 설계도. 설계도가 자동차는 아니고 개념으로만 있는 것
    2) 객체 (Object)
        - 클래스에서 정의한 속성과 기능을 가진 실체
        - 서로 독립적인 상태를 가짐
    3) 인스턴스 (Instance)
        - 특정 클래스로부터 생성된 객체를 의미함
        - 인스턴스는 객체랑 거의 비슷하지만 인스턴스가 조금 더 관계에 초점을 맞춘 단어임

7. 배열에 참조값 대입
    1) Product를 담을 수 있는 배열을 new에서 생성하고 해당 배열에 iphone과 sneakers라는 인스턴스를 보관함
        - Product[] inventory = new Product[2];
            - Product 타입의 변수는 Product 인스턴스의 참조값을 보관함
            - Product 배열의 각각의 항목도 Product 타입의 변수일 뿐
                - 따라서 Product 타입의 참조값을 보관함
            - 배열에는 아직 참조값을 대입하지 않았기 때문에 참조값이 없다는 의미의 null 값으로 초기화 됨
        - inventory[0] = iphone;
          inventory[1] = sneakers;
            - 자바에서 대입은 항상 변수에 들어있는 값을 copy함
            - iphone, sneakers에는 참조값이 보관외더 있음
                - 따라서 이 참조값이 배열에 저장됨
                - 참조값을 읽고 복사해서 대열에 대입함
            - 배열은 0x001, 0x002의 참조값을 가짐