1. 멀티스레딩
    1) 프로그램
        - 컴퓨터에게 일을 시키는 명령어의 집합
    2) 프로세스(Process)
        - 프로그램이 메모리에 할당된 상태
        - CPU에서 실행되는 단위는 아님
        - 프로세스가 CPU를 점유해 명령어가 실행되는 상태가 되려면 스레드가 생성되어야 함
    3) 스레드(Thread)
        - CPU를 점유해 일련의 명령어들이 실행되는 단위
    4) 멀티 스레드(Multi-Thread)
        - 하나의 프로세스 내에서 두 개 이상의 스레드가 독립적으로 실행되는 것
        - 각 스레드는 별도의 작업을 수행함
        - 프로그램은 동시에 여러 작업을 처리하는 것처럼 보임

2. 공유 자원을 사용하기 위한 동기화
    1) 멀티스레딩에서 가장 주의해야 할 부분
        - 여러 스레드가 번갈아 실행되면서 같은 자원을 공유한다는 점
    2) 같은 자원
        - 메모리
        - IO 장치
    3) 경쟁 관계(race condition)
        - 자원을 공유하는 스레드 간에 발생함
        - 한 스레드가 공유 자원(critical section)을 사용할 때 다른 스레드가 접근하지 못하도록 제어를 해줘야 함
        - 동기화(Synchronization)
            - 멀티스레딩 상황에서 공유 자원에 하나의 스레드만 접근할 수 있도록 순서를 제어하는 것

3. 스레드 구현하기
    1) Thread 클래스 상속받기 (extends)
    2) Runnable 인터페이스 구현하기 (implements)

4. 스레드 클래스의 여러가지 메서드
    1) 스레드 상태 알아보기
    2) sleep() 메서드
        - 일정 시간 동안 스레드가 Not Runnable 상태가 되도록 만듦
            - CPU를 점유할 수 없는 상태
        - 이 때 시간 단위는 밀리초임(milliseconds = 1/1000초)
            - 시간이 지나면 다시 CPU에서 실행 가능한 Runnable 상태가 되어 실행됨
    3) interrupt() 메서드
        - 스레드의 어떤 작업을 중지할 때 호출함
        - 스레드가 sleep(), wait(), join() 메서드에 의해 Not Runnable 상태일 때, 해당 스레드에 interrupt()를 호출하면
            => interruptException 발생하여 Not Runnable 상태를 빠져나옴
    4) join() 메서드
        - 한 프로그램 안에 두 개의 스레드가 실행 가능한 상황에서
        - 하나의 스레드가 다른 스레드의 결과를 참조해야 하는 경우에 join() 메서드 사용함
        - join() 메서드
            - 한 스레드가 다른 스레드를 대상으로 호출하는 메서드

5. 멀티스레딩과 동기화
    1) 여러 개의 스레드가 동시에 같은 메모리의 값을 변경하는 작업을 수행한다면 그 값에 대해 보장할 수 없는 상황이 발생함(기대값과 다를 수 있음)
    2) 이 때의 자원을 공유 자원 또는 임계 영역(critical section)이라고 함
    3) 동기화 (Synchronization)
        - 멀티스레딩 상황에서 여러 개의 스레드가 공유 자원에 동시에 접근하려 할 때, 한번에 하나의 스레드만 실행할 수 있도록 하고 나머지는 접근을 막아(blocking) 순서대로 접근하도록 하는 방법
    4) syncronized 예약어로 동기화 구현하기
        - 