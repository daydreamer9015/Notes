1. 오류(error)
    1) 컴파일 오류 (compile error)
        - 프로그램 코드 작성할 때 개발자의 실수로 발생함
    2) 실행 오류 (runtime error)
        - 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지되는 경우
        - 프로그램을 잘못 구현하여 의도와 다르게 실행되어 생기는 오류 => 버그(bug)
        - 로그(log) 분석으로 원인을 찾을 수 있도록 개발 시 로그를 남기는 것이 중요함

2. 실행 오류 (runtime error)
    1) 자바 가상 머신에서 발생하는 시스템 오류 (error)
        - 동적 메모리가 없는 경우, 스택 메모리의 오버플로우가 발생한 경우
        - 프로그램에서 제어할 수 없음
    2) 예외 (exception)
        - 프로그램으로 제어할 수 있음
        - 예)
            - 파일이 없는 경우, 네트워크로 데이터를 전송하려는데 연결이 안되는 경우, 배열값을 출력하는데 배열 요소가 없는 경우 등
    3) 오류 처리하는 클래스
        - Class Throwable
        - Class Error
        - Class Exception

3. 예외 클래스 (Class Exception)
    1)                        Class Exception
                            /                \
    Class IOException                               Class RuntimeException
    Class FileNotFoundException                     Class ArithmeticException
    Class SocketException                           Class IndexOutOfBoundsException

4. 예외 처리의 중요성
    1) 프로그램의 비정상 종료를 피하여 시스템이 원활하게 실행되도록 함
    2) 실행 오류가 발생한 경우의 오류 과정을 재현하는 것은 현실적으로 힘듦
    3) 오류가 발생한 경우 log를 남겨서 추후 log 분석을 통해 그 원인을 파악하여 bug를 수정하는 것이 중요함

5. 예외 처리하기
    1) try~catch 문으로 예외 처리하기
        - try {
            예외가 발생할 수 있는 코드 부분
        } catch(처리할 예외 타입 e) {
            try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
        }
    2) try~catch-finally 문
        - 프로그램에서 사용한 리소스는 프로그램이 종료되면 자동으로 close 해야 함
        - 시스템에서 허용하는 자원은 한계가 있기 때문임
        - try {
            예외가 발생할 수 있는 코드 부분
        } catch(처리할 예외 타입 e) {
            try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
        } finally {
            항상 수행되는 부분
        }
    3) try-with-resources 문
        - close() 메서드를 명시적으로 호출하지 않아도 try 블록 내에서 열린 리소스를 자동으로 닫도록 만들 수 있음
        - 조건 : Interface AutoCloseable을 구현해야 함
        - try(A a = new A(); B b = new B()) {

        } catch(Exception e) {

        }
        - 리소스를 try() 내부에서 선언해야 함
        - 자바 7부터 제공함
        - 자바 9부터 외부에서 선언한 변수를 try()문의 괄호 안에서 사용할 수 있게 개선됨
    4) 예외 처리 미루기
        - throws로 예외 처리 미루기

6. 사용자 정의 예외 클래스 구현하기
    1) 기존 JDK에서 제공하는 예외 클래스 중 가장 유사한 클래스를 상속받아 구현하는 것이 좋음
    2) 명확하지 않으면 가장 상위 클래스인 Exception을 상속받는 것이 좋음