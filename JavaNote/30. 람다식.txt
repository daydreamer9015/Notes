1. 프로그래밍 방법론
    1) 절차적 프로그래밍
        - 순차적인 명령을 수행하고 간단한 분기만 가능
    2) 구조적 프로그래밍
        - 특정 변수에 묶어 구조화하고 이를 통해 프로그래밍 효율 높임
    3) 객체지향 프로그래밍
        - 객체를 기반으로 프로그래밍하며 클래스, 속성, 기능들의 현실 세계 모델을 반영함
    4) 함수형 프로그래밍
        - 객체의 형태를 벗어나 함수형을 확장해 함수를 변수처럼 사용 가능
        - 함수를 간결하게 표현

2. 명령형 프로그래밍 vs 선언적 프로그래밍
    1) Imperative Programming
        - OOP 객체 지향 프로그래밍
        - 어떻게 하여야 하는가? (How)
    2) Declarative Programming
        - Functional Programming
        - 무엇을 하여야 하는가? (What)

3. First-Class Citizen (1급 시민) 조건
    1) 매개 변수(parameter)로서 전달할 수 있는가?
    2) 반환값(return)이 될 수 있는가?
    3) 변수에 담을 수 있는가?

4. 함수형 프로그래밍과 람다식
    1) 객체를 기반으로 프로그램 구현 시에는 클래스가 없으면 메서드를 사용할 수 없음
    2) 함수형 프로그래밍(Functional Programming: FP)
        - 함수의 구현과 호출만으로 프로그램을 만드는 방식
        - 자바 8부터 지원하고 있음
        - 람다식(Lambda expression)이라고 함
    3) 순수 함수(pure function)를 구현하고 호출
        - 외부 자료에 부수적인 영향(side effect)을 주지 않음
        - 함수 내부에서 함수 외부에 있는 변수를 사용하지 않아서 함수 수행되더라도 외부에 영향을 주지 않음

5. 람다식 문법
    1) 함수 이름이 없는 익명 함수를 만듦
    2) (입력: 매개변수) -> {구현부: 실행문(코드);}
    3) 예)
        int add(int x, int y) {
            return x + y;
        }
        ===> (int x, int y) -> {return x + y;}
    4) 매개변수 자료형과 괄호 생략하기
        - 매개변수 자료형은 생략 가능함
        - 매개변수가 하나인 경우 괄호도 생략 가능함
        - 예:
            str -> {System.out.println(str);}
            x, y -> {System.out.println(x, y);}  <--- 오류 발생함(변수가 2개인데 괄호 안 썼으므로)
    5) 중괄호 생략하기
        - 중괄호 안의 구현부가 한 문장인 경우에는 중괄호 생략 가능함
        - 예:
            str -> System.out.println(str);
        - 단, 중괄호 안의 구현부가 한 문장이더라도 return문이라면 중괄호 생략 불가함
        - 예:
            str -> return str.length(); <--- 오류 발생함
    6) return 생략하기
        - 중괄호 안의 구현부가 return문 하나라면 중괄호와 return 모두 생략하고 식만 쓸 수 있음
        - 예:
            (x, y) -> x + y         // 두 입력값에 대하여 더하고 반환함
            str -> str.length();    // 입력된 문자열에 대하여 문자열의 길이를 반환함

6. 람다식 구현하기
    1) 람다식을 구현하려면 먼저 인터페이스를 만들어야 함
    2) 인터페이스에 람다식으로 구현할 메서드를 선언해야 함
    => 함수형 인터페이스

7. 함수형 인터페이스
    1) 인터페이스에 두 개 이상의 메서드가 있어서는 안됨
    2) 람다식은 이름이 없는 익명 함수로 구현하기 때문에 메서드가 여러 개 있다면 어떤 메서드를 구현한 것인지 모호해짐
        => 람다식은 오직 하나의 메서드만 선언한 인터페이스를 구현할 수 있음
    3) @FunctionalInterface 애너테이션
        - 함수형 인터페이스라는 의미
        - 메서드를 하나 이상 선언하면 오류 발생함

8. 객체 지향 프로그래밍 방식과 람다식 비교

9. 함수를 변수처럼 사용하는 람다식
    1) 인터페이스형 변수에 람다식 대입하기
    2) 매개변수로 전달되는 람다식
    3) 반환값으로 쓰이는 람다식