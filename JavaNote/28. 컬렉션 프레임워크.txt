1. 자료 구조 (Data Structure)   - 메모리에서 일어나는 일이라 눈에 보이지는 않음
    1) 대량의 데이터를 효율적으로 관리하는 메커니즘을 자료구조라고 함
        - 예) 우편번호, 학번, 주민번호
        - 예) 무작위 명단
            - 무작위로 나열된 명단에서 특정 사람을 찾는 것은 비효율적임

            => 학년, 반, 번호로 관리
                - 체계적인 학생 관리를 통해 2학년 2반 30번 이순신 찾는 경우
                - 효율적으로 찾을 수 있음
    2) 배열, 리스트, 스택, 큐, 트리 등
        - 배열
            - 크기가 고정되어 있어서 데이터를 추가하거나 삭제하는 제한이 있음
            - 새로이 배열을 만들고 옮겨야함
        - 리스트
            - 원소가 원소를 가리켜서 관리하는 자료구조임
            - 데이터가 추가되거나 삭제될 때 연결하는 정보만 바꾸면 쉽게 추가, 삭제됨
        - 스택
            - 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 선형구조(LIFO)로 되어있음
            - 자료를 넣는 것을 밀어넣는다고 해서 푸시(push)라고 하고
            - 넣어둔 자료를 꺼내는 것을 팝(pop)이라고 함
            - 가장 최근에 푸시한 자료부터 나오게 함
            - 오래된 데이터가 제일 아래에 있음
        - 큐
            - 먼저 집어넣은 데이터가 먼저 나오는 FIFO 구조로 저장하는 자료구조
            - 지하철에 줄 선 승객들의 행렬과 같은 것
            - 제일 먼저 쌓인 데이터가 제일 먼저 출력됨
        - 트리
            - 부모 노드 밑에 여러 자식 노드가 계속 연결되고 자식 노드 각각에 다시 자식 노드가 연결되는 형태의 자료구조
            - 자식 노드에서 부모 쪽으로 계속해서 타고 올라가다 보면 결국 부모가 없는 하나의 노드로 이어지게 됨(루트 노드)
            - 루트 노드를 중심으로 뻗어나가는 모습이 나무 구조와 비슷함

2. 컬렉션(Collection)
    1) 여러 데이터를 수집해 놓은 자료 구조
    2) 저장 공간 크기가 동적으로 변화함
    3) 동일한 타입을 묶어 관리하는 자료 구조

3. 프레임워크(Framework)
    1) 클래스와 인터페이스의 묶음(라이브러리)
    2) 클래스 정의에 설계 원칙 또는 구조가 존재
    3) 리스트, 스택, 큐 등의 자료 구조에 정렬, 탐색 등의 알고리즘을 구현해 놓은 프레임워크
    4) 자료 구조를 개발자가 편리하게 사용할 수 있도록 컬렉션 프레임워크 제공함

4. 주요 클래스와 인터페이스

                    Interface Iterable<T>
                            /|\
                             |
                             |
                    Interface Collection<E>
                        - The root interface in the collection hierarchy.
                            /|\                                      /|\
                             |                                        |
                             |                                        |
                    Interface List<E>                       Interface Set<E>
                        - 순서가 있는 데이터 집합                   - 데이터의 순서가 유지되지 않음
                        - 추가된 데이터의 순서 유지됨                - 중복된 데이터가 제거됨
                        - 데이터 중복도 허용함                      - Class HashSet<E>
                        - Class ArrayList<E>                     - Class TreeSet<E>
                        - Class LinkedList<E>                    - 순서와 관계없이 유일한 값 관리
                        - Class Vector<E>                        - 저장된 순서와 출력된 순서는 다를 수 있음
                        - Class Stack<E>

5. List<E> 컬렉션 인터페이스
    1) 배열과 가장 비슷한 구조 가지고 있는 자료 구조
        - 순서가 있는 자료 구조
        - 데이터의 저장 순서가 유지됨
        - 동일한 데이터의 중복 저장 허용
        - 배열을 이용하여 객체를 저장함
    2) 객체 생성
        - 구현 클래스 생성자로 동적 컬렉션 객체를 생성
        - Arrays.asList(T...a) 메서드를 이용해서 정적 컬렉션 객체 생성
    3) 주요 메서드
        - add(E e) : 객체를 추가함
        - remove(Object o) : 객체가 존재하면 제거함
        - iterator() : 순환할 반복자(Iterator)를 반환함
        - clear() : Collection의 모든 객체를 제거함
        - int size() : Collection에 현재 저장되어 있는 요소 개수를 반환함

6. Interface Iterator<E>
    1) Collection 요소를 순회
    2) 컬렉션 프레임워크에 저장된 요소들을 하나씩 차례로 참조하는 것
    3) 순서가 있는 List 인터페이스의 경우에는 Iterator를 사용하지 않고 get(int index) 메서드를 활용할 수 있음
    4) Set 인터페이스의 경우 get(int index) 메서드가 제공되지 않으므로 Iterator를 이용하여 객체를 순회함
    5) 메서드
        - boolean hasNext()
            - 이후에 요소가 더 있는지를 체크하는 메서드
            - 요소가 있으면 true를 반환
        - E next()
            - 다음에 있는 요소를 반환

7. Interface Set<E>
    1) 중복되지 않게 자료 관리
        - 멤버의 중복 여부를 체크하기 위해 인스턴스의 동일성을 확인해야 함
        - 동일성 구현을 위해 필요에 따라 equals()와 hashCode() 메서드를 재정의함
    2) 저장 순서가 유지되지 않음
    3) 데이터 중복 저장을 허용하지 않음
    4) 예)
        - 아이디 동일한 경우 같은 멤버이므로 중복되지 않도록 Member클래스의 equals()와 hashCode() 메서드를 재정의 해야 함
    5) 비선형 구조로 객체를 관리
    6) 리스트 구조와 달리 대상 객체가 연속적이지 않음
    7) 
    8)