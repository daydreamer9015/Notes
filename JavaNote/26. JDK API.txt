1. java.lang 패키지
    1) 모든 프로그램에서 가장 많이 사용하는 기본 클래스를 포함하고 있는 패키지
    2) 프로그래밍 시에 import 하지 않아도 자동으로 import 됨

2. Object 클래스
    1) 모든 클래스의 최상위 클래스
    2) 모든 클래스는 Object 클래스를 상속받음
        - class Student => class Student extends Object : extends 생략되어 있음 
    3) Object 클래스의 메서드 중 일부는 재정의해서 사용할 수 있음
    4) String toString()
        - 객체를 문자열로 표현하여 반환함
            - 클래스 이름@해시코드 값(16진수)
                - 해시코드값은 자바 가상 머신이 힙 메모리에 저장한 인스턴스의 주소값임
        - 재정의하여 객체에 대한 설명이나 특정 멤버 변수값을 반환함
            - String, Integer 등 여러 JDK 내의 클래스에서 toString() 메서드 자체가 이미 재정의 되어 있음
    5) boolean equals(Object obj)
        - 객체의 같음을 비교하는 메서드
            - 두 인스턴스의 주소값을 비교
        - 동일성
            - 물리적 동일성 : 두 인스턴스의 메모리 주소가 같음
            - 논리적 동일성 : 두 인스턴스가 논리적으로 같음
                - equals() 메서드를 재정의하여 사용함
    6) int hashCode()
        - 해시(hash)
            - 정보를 저장한다거나 검색할 때 사용하는 자료 구조
            - 정보를 어디에 저장할 것인지, 어디에서 가져올 것인지 해시 함수를 사용하여 구현함
                - 해시 함수는 key값을 매개변수로 넣으면 그 객체가 저장되어야 할 위치나 이미 저장된 위치값을 반환해주는 함수임
        - 두 인스턴스(객체)가 같다면 hashCode() 메서드에서 반환하는 해시코드값이 같아야 함
            - 논리적으로 두 객체가 같은 때 같은 해시코드값을 반환하도록 hashCode() 메서드를 재정의 해야 함

3. String 클래스
    1) String 클래스 선언하는 두 가지 방법
        - String str1 = new String("abc"); => 생성자의 매개변수로 문자열 객체 생성
        - String str2 = "abc"; => 문자열 상수를 가리키는 방식. 리터럴값 바로 할당
    2) 문자열은 불변(immutable)함
        - 변수값 자체가 변하는 것처럼 보이지만 변한 것이 아니라 새로운 문자열이 생성된 것임
        - 프로그램을 만들다보면 문자열을 변경하거나 연결해야 할 때가 많음
        - String 클래스는 한 번 생성되면 그 내부의 문자열이 변경되지 않음
            - 메모리가 많이 낭비됨
    3) StringBuffer, StringBuilder 클래스 활용
        - 내부적으로 가변적인 char[]를 멤버 변수로 가짐
        - 결과적으로 문자열을 여러 번 가변하거나 연결할 때 사용하면 유용함
        - String처럼 새로운 인스턴스(객체)를 생성하지 않고 char[]을 변경함
        - StringBuffer
            - 문자열이 안전하게 변경되도록 보장
            - 멀티 스레드 상의 변경을 보장함(동기화)
        - StringBuilder
            - 싱글 스레드에서만 변경을 보장함
            - 단일 스레드 프로그램에서는 StringBuilder 사용을 권장
            - 실행 속도가 좀 더 빠름

4. Class 클래스
    1) 자바의 모든 클래스와 인터페이스는 컴파일 후 .class 파일이 생성됨
        - A.java ==> A.class
    2) Class 클래스는 컴파일 된 class 파일을 로드하여 객체를 동적 로드하고 정보를 가져오는 메서드가 제공됨
        - 클래스나 인터페이스에 대한 변수, 메서드, 생성자 등의 정보
    3) Class 클래스를 선언하고 정보 가져오기
        - 클래스를 정의하거나 사용할 때 이미 그 클래스 정보(변수, 메서드 등)를 알고 있는 상황에서 프로그램을 만듦
        - 클래스 정보를 모르는 경우 클래스 정보를 직접 찾아야 함
            => 이때 Class 클래스를 활용함
        - Class 클래스를 선언하고 클래스 정보를 가져오는 방법
            - Object 클래스의 getClass() 메서드 사용하기
            - 클래스 파일 이름을 Class 변수에 직접 대입하기
            - Class 클래스의 static 메서드 중 forName()을 사용 => Class.forName("클래스이름")
    4) Class 클래스로 클래스 정보 확인하기
        - Class 클래스로 생성자, 메서드, 인스턴스 변수 등의 정보를 가져올 수 있음
        - Class 클래스를 활용하여 그 클래스의 정보를 가져오고, 이 정보를 활용하여 인스턴스를 생성하거나 메서드를 호출하는 방식 => 리플렉션 (reflection)