1. 스트림(Stream)
    1) 자료가 오고갈 수 있는 통로
    2) 네트워크와 관련된 자료 흐름이 물의 흐름과 같다는 의미에서 유래됨
    3) 자료를 읽어 들이려는 소스(source)와 자료를 사용하려는(밖으로 나가는) 대상(target)에 따라서 각각 다른 스트림 클래스 제공

2. 스트림의 종류
    1) 입력 스트림과 출력 스트림
        - 스트림은 단방향으로 자료가 이동함
        - 입력과 출력을 동시에 할 수 없음
        - 입력 스트림
            - InputStream
            - Reader
        -출력 스트림
            - OutputStream
            - Writer
    2) 바이트 단위 스트림과 문자 단위 스트림
        - 바이트 스트림
            - 원래 자바스트림은 바이트(byte) 단위로 자료의 입출력이 이루어짐
            - 그림, 동영상, 음악 등
            - 클래스명: ~~InputStream, ~~OutputStream
        - 문자 스트림
            - 문자 하나를 나타내는 char형은 2바이트임
            - 1바이트로 커버되지 않는 것들을 위해 문자 스트림 제공
            - 클래스명: ~~Reader, ~~Writer
    3) 기반 스트림(베이스 스트림)과 보조 스트림
        - 기반 스트림
            - 읽어 들일 곳이나 써야 할 곳에서 직접 읽고 쓰는 기능이 있음
            - 입출력 대상에 직접 연결되어 생성되는 스트림
        - 보조 스트림
            - 직접 읽고 쓰는 기능 없음
            - 항상 다른 스트림을 포함하여 생성됨
        - 예)
            기반 스트림 + 보조 스트림A + 보조 스트림B

3. 표준 입출력 (Standard Input, Standard Output)
    1) 표준 출력 스트림
        - 변수 이름 : out
        - 자료형 : static PrintStream
    2) 표준 입력 스트림
        - 변수 이름 : in
        - 자료형 : static InputStream
    3) 표준 오류 출력 스트림
        - 변수 이름 : err
        - 자료형 : static OutputStream

4. 바이트 단위 스트림
    1) InputStream
        - 바이트 단위로 읽는 스트림의 최상위 클래스
        - 추상 메서드를 포함한 추상 클래스
        - FileInputStream, ByteArrayInputStream, FilterInputStream
        - 메서드
            - int read()
                - 입력 스트림으로부터 1바이트의 자료를 읽음
                - 읽은 자료의 바이트 수를 반환함
            - int read(byte[] b)
                - 입력 스트림으로부터 b[] 크기의 자료를 b[]에 읽음
                - 읽은 자료의 바이트 수를 반환함
            - int read(byte[] b, int off, int len)
                - 입력 스트림으로부터 b[] 크기의 자료를 b[]의 off 변수 위치부터 저장하며 len만큼 읽음
                - 읽은 자료의 바이트 수를 반환함
            - void close()
                - 입력 스트림과 연결된 대상 리소스를 닫음
    2) OutputStream
        - 바이트 단위로 쓰는 스트림 중 최상위 클래스
        - FileOutputStream, ByteArrayOutputStream, FileOutputStream
        - 메서드
            - void write(int b)
                - 1 바이트 출력함
            - void write(byte[] b)
                - b[] 배열에 있는 자료를 출력
            - void write(byte[] b, int off, int len)
                - b[] 배열에 있는 자료의 off 위치부터 len 개수만큼 자료를 출력
            - void flush()
                - 출력을 위해 잠시 자료가 머무르는 출력 버퍼를 강제로 비워 자료를 출력
            - void close()
                - 출력 스트림과 연결된 대상 리소스를 닫음
                - 출력 버퍼가 비워짐 (flush 효과도 있음)

5. 문자 단위 스트림
    1) Class Reader
        - 문자 단위로 읽는 스트림 중 최상위 스트림
        - 하위 클래스
            - Class FileReader
            - Class InputStreamReader
            - Class BufferedReader
        - 자료를 읽는 메서드
            - int read()
                - 파일로부터 한 문자를 읽고 그 값을 반환함
            - int read(char[] cbuf)
                - 파일로부터 문자 배열 cbuf의 문자를 읽음
            - int read(char[] cbuf, int off, int len)
                - 파일로부터 문자 배열 cbuf의 off 위치에서부터 len 개수만큼 문자를 읽음
            - void close()
                - 스트림과 연결된 파일 리소스를 닫음
    2) Class Writer
        - 문자 단위로 출력하는 스트림 중 가장 최상위 스트림
        - 하위 클래스
            - Class FileWriter
            - Class OutputStreamWriter
            - Class BufferedWriter
        - 자료를 쓰는 메서드
            - void write(int c)
                - 한 문자를 파일에 출력함
            - void write(char[] cbuf)
                - 문자 배열 cbuf의 내용을 파일에 출력함
            - void write(char[] cbuf, int off, int len)
                - 문자 배열 cbuf의 off 번째 문자부터 len 개수만큼 문자를 파일에 출력함
            - void write(String str, int off, int len)
                - 문자열 str의 off번째 문자부터 len 개수만큼 문자를 파일에 출력함
            - void flush()
                - 파일에 출력하기 전에 자료가 남아있는 공간(출력 버퍼)을 비워서 출력함
            - void close()
                - 파일과 연결된 스트림을 닫음
                - 출력 버퍼도 초기화 됨

6. 보조 스트림
    1) 다른 스트림에 기능을 추가하는 보조 스트림
    2) 입출력 대상이 되는 파일이나 네트워크에 직접 쓰거나 읽는 기능은 없음
    3) Wrapper Stream이라고도 함
        - 다른 스트림을 감싼다
        - 생성자의 매개변수로 다른 스트림을 받음
    4) FilterInpurStream과 FilterOutputStream 생성자
        - protected FilterInputStream(InputStream in)
            - 생성자의 매개변수로 InputStream을 받음
        - protected FilterOutputStream(OutputStream out)
            - 생성자의 매개변수로 OutputStream을 받음
    5) 구성
        - 기반 스트림 + 보조 스트림 + 보조 스트림
        - 바이트 단위 파일 입력 스트림 + 문자로 변환 기능 추가 + 버퍼링 기능 추가
    6) Buffered 스트림
        - BufferedInputStream
            - 바이트 단위로 읽는 스트림에 버퍼링 기능을 제공
        - BufferedOutputStream
            - 바이트 단위로 출력하는 스트림에 버퍼링 기능을 제공
        - BufferedReader
            - 문자 단위로 읽는 스트림에 버퍼링 기능을 제공
        - BufferedWriter
            - 문자 단위로 출력하는 스트림에 버퍼링 기능을 제공

7. File 클래스
    1) 파일이라는 개념을 추상화한 클래스

8. 직렬화
    1) 직렬화와 역직렬화
        - 클래스의 인스턴스가 생성되면 인스턴스의 상태, 즉 인스턴스 변수값은 마치 생명체처럼 계속 변할 수 있음
        - 직렬화는 어떤 순간의 값을 저장하기 위함
        - 인스턴스의 어느 순간 상태값을 그대로 저장하거나 네트워크를 통해 전송할 일이 발생할 수 있음
            => 이를 직렬화(Serialization)라고 함
        - 직렬화란 인스턴스 내용을 연속 스트림으로 만드는 것임
        - 직렬화 과정에서는 인스턴스 변수값을 스트림으로 만드는 일을 함

        - 저장된 내용이나 전송받은 내용을 원래 내용으로 다시 복원하는 것
            => 이를 역직렬화(Deserialization) 라고 함
    2) ObjectInputStream, ObjectOutputStream을 사용하여 구현함
        - 생성자
            - ObjectInputStream(InputStream in)
            - ObjectOutputStream(OutputStream out)
    3) InterFace Serializable
        - 직렬화는 인스턴스 내용이 외부로 유출되는 것
        - 프로그래머가 직렬화하겠다는 의도를 표시해야 함
            - Serializable 마커 인터페이스를 구현해야 함