1. 자바 메모리 구조 (Java Memory Structure) 
    1) 메서드 영역(Method Area)
        - 클래스 정보 보관(프로토타입, 붕어빵 틀) - A.class
            - 클래스, 메서드 등의 실행 코드 (바이트 코드)
        - 스태틱 영역 static area
            - static 변수 보관
        - 상수 풀
            - 모든 자바 어플리케이션에서 공통적으로 사용되는 것, 공통 리터럴 상수
            - "hello", 123 ...
    2) 스택 영역 (Stack Area)
        - 실제 프로그램이 실행되는 영역
        - 메서드를 실행할 때마다 하나씩 아래서 위로 쌓임
        - 지역 변수, 메소드 호출 정보
        - 스택 프레임
            - 메서드를 호출할 때마다 하나의 스택 프레임이 쌓임
            - 메서드가 종료되면 해당 스택 프레임이 제거됨
    3) 힙 영역 (Heap Area)
        - 객체(인스턴스)가 생성되는 영역
        - new 명령어를 사용하면 이 영역을 사용함
        - 배열도 이 영역에 생성됨
        - 가비지 컬렉션(GC)이 더 이상 참조되지 않는 객체를 제거함

2. 스택과 큐 자료 구조 (메모리에 스트럭쳐 형태로 존재)
    1) 후입선출 (LIFO Last In First Out)
        - 나중에 넣은 것이 가장 먼저 나옴
        - 이런 자료 구조를 스택이라 부름 (Stack)
    2) 선입선출 (FIFO, First In First Out)
        - 후입 선출과 반대로
        - 가장 먼저 넣은 것이 가장 먼저 나오는 것
        - 이러한 자료 구조를 큐(Queue)라고 함

3. 스택 영역
    1) 처음 자바 프로그램을 구동하면 main()을 실행함. 이 main이 진입점임
        - main()을 위한 스택 프레임이 하나 생성됨
            - 내부에 args라는 매개변수를 가짐
    2) main()은 method1()을 호출함
        - method1() 스택 프레임이 생성됨
            - 내부에 m1, cal 지역 변수(매개변수 포함)를 가짐
            - 해당 지역변수들이 스택 프레임에 포함됨
    3) method1은 method2를 호출함
        - method2() 스택 프레임이 생성됨
            - 내부에 m2 지역변수(매개변수 포함)를 가짐
            - 해당 지역변수 역시 스택 프레임에 포함됨
    4) 정리
        - 자바는 스택 영역(JVM)을 사용해서 메서드 호출과 지역변수(매개변수 포함)를 관리함
        - 메서드를 계속 호출하면 아래에서 위로 스택 프레임이 계속 쌓임
        - 지역변수(매개변수)는 스택 영역에서 관리함
        - 스택 프레임이 종료되면 지역 변수도 함께 제거됨
        - 스택 프레임이 모두 제거되면 프로그램도 종료됨

4. 스택 영역와 힙 영역 함께 사용
    1) main() => method1() => method2() 순서로 호출하는 단순한 구조의 코드임
    2) method1()에서 Data 클래스의 인스턴스를 생성함
    3) method1()에서 method2()를 호출할 때 매개변수에 Data 인스턴스의 참조값을 전달함 (method2()의 파라미터로 data2가 넘어감)
    4) 정리
        - 지역변수는 스택 영역에, 객체(인스턴스)는 힙 영역에서 관리되는 것을 확인함
        - 메서드 영역이 관리하는 변수가 있음
            - static 변수