1. 반복문
    1) 특정 코드를 반복해서 실행할 때 사용함
    2) 3가지 종류
        - while, do-while, for
    3) while문
        - 구문
            - while(조건식) {
                // 코드
            }
    4) do-while문
        - 구문
            - do {
                // 코드
            }while(조건식);
            - 조건에 만족하지 않아도 한 번은 실행됨
    5) for문
        - for문 주로 반복 횟수가 정해져 있을 때 사용함
        - 구문 (1-2-3-4 순서로 실행됨)
            - for (1. 초기식; 2. 조건식; 4. 증감식) {
                //3. 코드
            }
        - 무한반복 (끝나는 조건을 넣어주지 않으면 무한반복됨)
            - for( ; ; ) {
                // 코드
            }

            - while(true) {
                // 코드
            }

2. break, continue
    1) 반복문에서 사용할 수 있는 키워드임
    2) break는 반복문을 즉시 종료하고 나감
    3) continue는 반복문의 나머지 부분을 건너뛰고 다음 반복으로 진행하는 데 사용됨
    4) break 구문
        - while(조건) {
            코드1;
            break;  // 즉시 while문 종료로 이동
            코드2;
        }

        continue 구문
        - while(조건) {
            코드1;
            continue;   // 즉시 조건식으로 이동함
            코드2;
        }

3. 중첩 반복문
    1) 반복문은 내부에 또 반복문을 만들 수 있음

4. 정리
    1) for문
        - 초기화, 조건 체크, 반복 후의 작업 한 줄에서 처리할 수 있어서 편리함
        - 정해진 횟수만큼의 반복을 수행하는 경우에 사용하기 적합함
        - 루프 변수의 범위가 for 블록에 제한되므로 다른 곳에서 이 변수를 실수로 변경할 가능성이 적음
        - 복잡한 조건을 가진 반복문을 작성하기에는 while문이 더 적합할 수 있음
    2) while문
        - 루프의 조건이 루프 내부에서 변경되는 경우, while 루프는 이를 관리하기 쉬움
        - for 루프보다 더 복잡한 조건과 시나리오에 적합함
        - 조건이 충족되는 동안 계속해서 루프를 실행하며 종료 시점이 명확하게 알 수 없는 경우에 유용함
        - 루프 변수가 while 블록 바깥에서도 접근 가능하므로 이 변수를 실수로 변경하는 상황이 발생할 수 있음