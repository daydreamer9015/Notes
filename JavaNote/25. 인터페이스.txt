1. 구현 코드가 없는 인터페이스 (Interface)
    1) 클래스 혹은 프로그램이 제공하는 기능을 명시적으로 선언하는 역할을 함
    2) 추상 메서드, 상수로만 구성됨
        - public abstract ~, public static final ~
    3) 인스턴스를 생성할 수 없음
    4) 문법
        interface 인터페이스 이름 {
            void something();
            float PI = 3.14;
        }
    5) Java 8부터 일부 구현 코드가 추가됨
        - 디폴트 메서드 (default method)
        - 정적 메서드 (static method)

2. 인터페이스가 하는 일
    1) 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification) <- 이를 정의하는 것이 아주 고도의 작업임
    2) 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있음
    3) 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임
    4) 인터페이스를 구현한 다양한 객체를 사용함 == 다형성 구현
        - JDBC 인터페이스

3. 인터페이스 구현과 형 변환
    1) 인터페이스를 구현한 클래스는 인터페이스 형으로 선언한 변수로 형 변환할 수 있음
        - 예) Calc calc = new CompleteCalc();
        - 상속에서의 형 변환과 동일한 의미 = 업캐스팅
    2) 인터페이스를 활용한 다형성 구현 (정형화된 패턴이 들어감)
        - 하나의 인터페이스를 여러 객체가 구현하게 되면 클라이언트 프로그램은 자바 API가 제공해주는 인터페이스 메서드를 활용하여 여러 객체의 구현을 사용할 수 있음 (다형성)

4. 디폴트 메서드와 정적 메서드
    1) 자바 7까지는 인터페이스에서 추상 메서드와 상수, 이 두가지 요소만 선언해서 사용할 수 있었음
    2) 인터페이스 활용성 높이기 위해 디폴트 메서드와 정적 메서드 기능을 제공함
    3) 디폴트 메서드(default method)
        - 기본으로 제공되는 메서드
    4) 정적 메서드(static method)
        - 클래스 생성과 무관하게 사용할 수 있는 있음 (인터페이스가 동일하게 적용됨)
        - 인터페이스.정적 메서드 -> 호출

5. private 메서드
    1) 자바9부터 인터페이스에 private 메서드를 구현할 수 있음
    2) 인터페이스를 구현한 클래스에서 사용하거나 재정의할 수 없음
    3) 내부에서만 사용하는 용도임

6. 인터페이스 활용하기
    1) 한 클래스가 여러 인터페이스를 구현하는 경우