1. 구현 코드가 없는 인터페이스 (Interface)
    1) 클래스 혹은 프로그램이 제공하는 기능을 명시적으로 선언하는 역할을 함
    2) 추상 메서드, 상수로만 구성됨
        - public abstract ~, public static final ~
    3) 인스턴스를 생성할 수 없음
    4) 문법
        interface 인터페이스 이름 {
            void something();
            float PI = 3.14;
        }
    5) Java 8부터 일부 구현 코드가 추가됨
        - 디폴트 메서드 (default method)
        - 정적 메서드 (static method)

2. 인터페이스가 하는 일
    1) 일종의 클라이언트 코드와의 약속이며 클래스나 프로그램이 제공하는 명세(specification) <- 이를 정의하는 것이 아주 고도의 작업임
    2) 클라이언트 프로그램은 인터페이스에서 선언된 메서드 명세만 보고 이를 구현한 클래스를 사용할 수 있음
    3) 어떤 객체가 하나의 인터페이스 타입이라는 것은 그 인터페이스가 제공하는 모든 메서드를 구현했다는 의미임
    4) 인터페이스를 구현한 다양한 객체를 사용함 == 다형성 구현
        - JDBC 인터페이스

3. 인터페이스 구현과 형 변환
    1) 인터페이스를 구현한 클래스는 인터페이스 형으로 선언한 변수로 형 변환할 수 있음
        - 예) Calc calc = new CompleteCalc();
        - 상속에서의 형 변환과 동일한 의미 = 업캐스팅
    2) 인터페이스를 활용한 다형성 구현 (정형화된 패턴이 들어감)
        - 하나의 인터페이스를 여러 객체가 구현하게 되면 클라이언트 프로그램은 자바 API가 제공해주는 인터페이스 메서드를 활용하여 여러 객체의 구현을 사용할 수 있음 (다형성)

4. 디폴트 메서드와 정적 메서드
    1) 자바 7까지는 인터페이스에서 추상 메서드와 상수, 이 두가지 요소만 선언해서 사용할 수 있었음
    2) 인터페이스 활용성 높이기 위해 디폴트 메서드와 정적 메서드 기능을 제공함
    3) 디폴트 메서드(default method)
        - 기본으로 제공되는 메서드
    4) 정적 메서드(static method)
        - 클래스 생성과 무관하게 사용할 수 있는 있음 (인터페이스가 동일하게 적용됨)
        - 인터페이스.정적 메서드 -> 호출

5. private 메서드
    1) 자바9부터 인터페이스에 private 메서드를 구현할 수 있음
    2) 인터페이스를 구현한 클래스에서 사용하거나 재정의할 수 없음
    3) 내부에서만 사용하는 용도임

6. 인터페이스 여러가지 요소 (요약)
    1) 상수
        - 모든 변수는 상수로 변환됨 (public static final)
    2) 추상 메서드
        - 모든 선언된 메서드는 추상 메서드(abstract method)
    3) 디폴트 메서드
        - 기본으로 제공되는 메서드
        - 인터페이스를 구현한 클래스가 생성되면 그 클래스에서 사용할 기본 기능임
        - 디폴트 메서드를 선언할 때는 default 예약어를 사용함
    4) 정적 메서드
        - 객체 생성과 무관하게 사용할 수 있음
        - 인터페이스 이름으로 직접 참조하여 사용함
    5) private 메서드(java9 이후)
        - 인터페이스를 구현한 클래스에서 사용하거나 재정의할 수 없음
        - 인터페이스 내부에서만 사용하기 위해 구현하는 메서드
        - default 메서드나 static 메서드에서 사용함

7. 인터페이스 활용하기
    1) 한 클래스가 여러 인터페이스를 구현하는 경우
    2) 두 인터페이스의 디폴트 메서드가 중복되는 경우
        - 구현하는 클래스에서 반드시 재정의를 해야 함
    3) 인터페이스 상속하기
        - 인터페이스 간에도 상속이 가능함
        - 형 상속(type inheritance)
        - 인터페이스는 여러 개를 동시에 상속받을 수 있음
    4) 인터페이스 구현과 클래스는 상속 함께 사용하기

8. 결제 시스템(다중 인터페이스 구현)
    1) 요구사항 분석
        - 기능 요구사항 (Functional Requirements)
            - 기본 결제 기능
            - 수수료 계산 기능
            - 환불 기능
            - VIP 프리미엄 기능
            - 모바일
        - 비기능 요구사항 (Non-Functional Requirements)
            - 확장성
                - 새로운 결제 방식 추가 시 기존 코드 변경 최소화
                - 인터페이스 기반 설계로 느슨한 결합 구현
            - 유지 보수성
                - 각 인터페이스 별 단일 책임 원칙 준수
                - 명확한 메서드 명명과 상세한 주석 제공
            - 테스트 용이성
                - 다형성을 활용한 통합 테스트 가능
                - instanceof 검사를 통한 기능별 테스트
    2) 단계별 구현
        - 1단계
            - 기본 인터페이스 설계
                - 추상 메서드, 디폴트 메서드
            - 기본 결제
                - Payable 인터페이스
                - Refundable 인터페이스