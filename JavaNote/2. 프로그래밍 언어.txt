1. 고급어와 저급어
    1) CPU가 인식할 수 있는 명령어는 기계어
        - CPU 접점에 전기 신호(+5v)를 넣으면 1, 그렇지 않으면 0
        - 2진수로 표기 가능 (보통 16진수로 변환해 표기)
    2) 장치에 의존적인 기계어를 사람이 이해하기 용이한 문자열 표기로 정의한 것이 고급어
        - Java, C, C++, Python

2. 기계어 코드
    1) Machine code는 전기 신호의 조합(0, 1)
    2) 2진수로 표기하기 보다는 16진수로 변환해서 표기
    3) 0x는 16진수를 의미함 (x=hexadecimal)

3. 항, 식, 구문
    1) 여러 항이 모여서 식을 이룸
    2) 식은 평가 대상
        - 식을 평가하기 위해서는 연산을 해야함
    3) 여러 식을 모아서 하나의 구문을 이루며 고급어 기준이 되는 실행단위가 됨
    4) 연속되는 구문을 위에서 아래로 순차적 실행

4. 컴파일러와 인터프리터
    1) 컴파일러 (Complier) (시스템 소프트웨어임)
        - 고급어 소스코드를 기계어로 번역하는 프로그램
        - 전체 소스코드를 모두 기계어로 변환한 후 실행
        - 성능 최적화가 용이하여 다수 언어가 채택
        - C, C++ 등이 여기에 해당
    2) 인터프리터 (Interpreter)
        - 고급어 소스코드를 직접 실행하는 프로그램이나 환경을 의미
        - 보통 한번에 한 줄 단위로 실행
        - 성능(특히 속도)면에서 컴파일러 방식보다 느림
        - JavaScript, Python등이 여기에 해당
    
5. 프로그래밍(개념적 측면)
    1) 프로그래밍 그 자체는 절차적 순서를 기술한 글쓰기. 구문을 만드는 것
    2) 논리적으로 하나씩 풀어내는 훈련이 필요함

6. 상수
    1) 연산식을 기술하는 시점에 값이 정해진 수
    2) 값이 확정되어 앞으로 별한 가능성이 없는 수
    3) 리터럴(상수)
        - '문자리터럴A', "문자열리터럴Hello", 숫자리터럴3, 실수리터럴3.4F, 123.45
    4) 심볼릭 상수
        - final

7. 변수
    1) 연산식을 기술하는 시점에 값이 정해지지 않은 수
    2) 구체화하지 않았거나 앞으로 변경될 가능성이 있는 수
    3) 개발자가 메모리를 사용하는 가장 일반적
    4) 구체적으로 결정되는 값에 따라 연산의 내용이 달라질 수 있는 원인으로 작용