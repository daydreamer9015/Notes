1. 추상 클래스(Abstract Class)
    1) 추상적
        - 구체적이지 않고 막연한 것
    2) 구체적이지 않은 클래스 <===> concrete class (지금까지 정의해왔던 클래스)
    3) 정의
        - 구현 코드 없이 메서드의 선언만 있는 추상메서드(abstract class)를 포함한 클래스
        - 추상 클래스는 항상 추상 메서드를 포함함
        - 추상 메서드는 구현 코드가 없음
            - 메서드의 함수 몸체(body)가 없다는 뜻
    4) abstract 예약어를 사용
    5) 추상 클래스는 new 할 수 없음(인스턴스화 할 수 없음)

2. 메서드
    1) 메서드 선언(declaration) : 반환타입, 메서드 이름, 매개변수로 구성
    2) 메서드 정의(definition)
        - 메서드 구현(implementation)과 동일한 의미로 이야기함
        - 구현부(body)를 가짐 { }
    3) 예)
        int add(int x, int y) { };
        abstract int add(int x, int y);

3. 추상 클래스 구현하기
    1) 메서드에 구현 코드가 없으면 abstract로 선언
    2) abstract로 선언된 메서드를 가진 클래스는 abstract로 선언
    3) 모든 클래스가 구현된 클래스라고 해도 abstract로 선언되면 추상 클래스로 인스턴스화 할 수 없음
    4) 추상 클래스의 추상 메서드는 하위 클래스가 상속하여 구현
        - 추상 클래스의 추상 메서드 : 하위 클래스가 구현해야 하는 메서드
        - 추상 클래스의 구현된 메서드
            - 하위 클래스가 공통으로 사용하는 메서드
            - 필요에 따라 하위 클래스에서 재정의(overriding)함

4. 클래스(객체)와 클래스(객체) 관계
    1) IS-A 관계(inheritance, is a relationship)
        - 일반적인(general) 개념과 구체적인(specific) 개념과의 관계
        - 상위 클래스 : 하위 클래스보다 일반적인 개념 (예:Employee)
        - 하위 클래스 : 상위 클래스보다 구체적인 개념들이 더해짐 (예: Developer, Manager, Designer...)
        - 상속은 클래스 간의 결합도가 높은 설계
        - 상위 클래스의 수정이 하위 클래스에 영향을 미칠 수 있음 (Dog is an animal.<-가능 / Animal is a dog.<-불가능)
        - 계층 구조가 복잡하거나 hierarchy가 높으면 좋지 않음
    2) HAS-A 관계(composition)
        - 클래스가 다른 클래스를 포함하는 관계 (변수로 선언)
        - 코드 재사용의 가장 일반적인 방법
        - 상속하지는 않음
        - 클래스 간의 결합도가 낮은 설계

5. 추상 클래스와 프레임워크
    1) 추상 클래스는 많은 프레임워크에서 사용하고 있는 구현 방식
    2) 안드로이드 앱을 만들 때 안드로이드 라이브러리에서 제공하는 많은 클래스를 사용
        - 클래스 중에는 모두 구현된 클래스도 있음
        - 일부만 구현되어 있어서 상속을 받아 내가 구현하는 경우도 많음
    3) 상속받은 모든 클래스에서 공통으로 사용할 메서드를 제공함
        - 구현을 미루어 놓은 메서드(추상 메서드)는 실제 앱에서 어떻게 구현하느냐에 따라서 전혀 다른 결과가 구현됨
                                                                              (다르게 구현해야 할 내용으로 앱에서 구현하도록 선언만 해 둔 것임)

6. 추상 클래스 응용
    1) 템플릿(template) 메서드
        - 추상 메서드와 구현된 메서드를 활용하여 코드의 흐름을 정의하는 메서드
        - final로 선언하여 하위 클래스에서 재정의(overriding) 할 수 없게 해야 함
        - 프레임워크에서 많이 사용하는 설계 패턴의 일종
    2) 추상 클래스로 선언된 상위 클래스에서 템플릿 메서드를 활용
        - 전체적인 흐름을 정의하고 하위 클래스에서 다르게 구현되어야 하는 부분은 추상 메서드로 선언하여 하위 클래스에서 구현하도록 함