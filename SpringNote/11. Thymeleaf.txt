1. Thymeleaf 소개
    1) 공식 사이트 : https://www.thymeleaf.org/
    2) 특징
        - 서버 사이드 HTML 렌더링 (SSR)
            - 타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링하는 용도로 사용됨
        - Natural Platform
            - 타임리프는 순수 HTML을 최대한 유지하는 특징이 있음
            - 순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있음
                - Natural Template
        - Spring 통합 지원

2. 타임리프 기본 기능
    1) 타임리프를 사용하려면 선언을 하면 됨
        - 타임리프 사용 선언
            <html xmlns:th="http://www.thymeleaf.org/">
        - 기본 표현식들
            - 간단한 표현
                - 변수 표현식 : ${...}
                - URL 표현식 : @{...}
    2) 텍스트
        - 타임리프의 가장 기본 기능은 텍스트 출력기능임
        - 타임리프는 기본적으로 HTML 태그의 속성에 기능을 정의해서 동작함
        - 안전한 방식(Escape)
        - 불안전한 방식도 존재 (Unescape)

3. Escape
    1) HTML 문서는 < , > 같은 특수 문자를 기반으로 정의됨
    2) 따라서 뷰 템플릿으로 HTML 화면을 생성할 때는 들어가는 데이터에 이러한 특수 문자가 있는 것을 주의해서 사용해야 함
        - 예) <b>가 있으면 해당 부분을 강조하는 것이 목적임
            - &lt; b &gt; 로 변경된 것을 확인할 수 있음
    3) 웹 브라우저는 <를 HTML 태그의 시작으로 인식함
        - 따라서 <를 태그의 시작이 아니라 문자로 표현할 수 있는 방법이 필요함
        - => HTML 엔티티라고 함
        - HTML에서 사용하는 특수 문자를 HTML 엔티티로 변경하는 것을 Escape라고 함
    4) 타임리프가 제공하는 th:text, [[...]]는 기본적으로 escape를 제공함

4. 변수 - SpringEL
    1) Spring EL이라는 스프링이 제공하는 표현식 사용함
    2) Object
    3) List
    4) Map

5. 레이아웃 조립
    1) Thymeleaf는 화면을 재사용 가능한 조각(fragment)으로 나누어 사용할 수 있도록 도와주는 기능 제공함
        - 속성
            - th:replace, th:include
            - 페이지의 일부를 외부 HTML 조각 파일로부터 가져와 삽입할 수 있도록 해줌
    2) 공통 레이아웃, 헤더, 풋터, 메뉴바 등을 반복 작성하지 않고 재사용할 수 있게 해주는 기능임
    3) th:replace <---- 해당 태그를 완전히 대체함
        - 지정한 fragment로 현재 태그를 완전히 바꿈
        - 외부 파일의 HTML 구조를 그대로 유지하면서 삽입됨
        - 기본구조 (thymeleaf 2.x)
            - 파일 경로/파일명 :: fragment명
                             --
                             구분자(double colon)
        - 기본구조 (thymeleaf 3.x)
            - ~{...}
                - ~ : fragment 표현식 시작 기호
                - {...} : fragment 경로와 이름을 감싸는 중괄호
    4) fragment 선언
        - th:fragment="이름" 속성을 사용하여 선언함