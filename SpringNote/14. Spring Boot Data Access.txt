1. Spring Data JPA
    1) Spring Framework의 모듈 중 하나
    2) Java Persistence API (JPA)를 기반으로 데이터 접근 계층을 쉽게 구현할 수 있도록 도와주는 라이브러리(인터페이스)임
    3) 복잡한 데이터베이스 상호작용을 단순화하고, 반복적인 CRUD(Create, Read, Update, Delete) 작업을 자동화함
    4) 데이터베이스와의 상호작용을 보다 간편하게 처리할 수 있는 다양한 기능 제공함

2. JPA 연결 구조도 - 2, 5, 6은 개발자가 설정
    - 실행 순서
    1) JpaRepository
        - Spring Data JPA가 제공하는 기본 인터페이스 (CRUD 메서드 자동 제공)
        - 인터페이스 상속만 하면 됨 (extends)
    2) Repository Interface
        - 개발자가 정의하는 커스텀 Repository
        - 상속 후 필요하면 비즈니스 로직에 맞는 메서드 추가 가능 (직접 작성 필요)
    3) EntityManager
        - JPA Core Interface
        - 엔티티 생명주기 관리
        - 자동 처리 (직접 사용 거의 없음)
        - Spring Data JPA가 내부에서 사용
    4) Hibernate (Session)
        - JPA 구현체
            - SQL 자동 생성/실행
        - 실제 DB 작업 수행
        - 자동 동작 (설정만 필요)
        - Hibernate 세션 획득
        - application.yml 안에 있는 hibernate 부분
    5) Entity Class
        - Database Table Mapping
        - DB 테이블 매핑
            - 테이블과 1:1 매핑
            - @Entity, @Id, @Column
        - 개발자가 클래스 작성 필수!
    6) DataSource (HikariCP)
        - DB 연결 정보 관리
            - URL, username, password 등
        - Connection Pool
            - 성능 최적화
        - 개발자가 application.yml 설정
    7) Database
        - 실제 데이터가 저장되는 RDBMS
            - MySQL, Oracle, PostgreSQL, MariaDB 등
        - 개발자가 DB 설치, 스키마 생성

3. Spring Boot 스타터를 사용한 단순화된 데이터 엑세스
    1) ORM Mapping

        객체지향 프로그래밍                 관계형 데이터베이스
        Java Object                      Database Table
                        패러다임의 불일치
        - 개발자는 객체지향적으로 프로그래밍하고 JPA가 이를 관계형 데이터베이스에 맞게 SQL을 대신 생성해주는 기술
    2) JPA ORM 매핑의 주요 개념
        - 엔티티 클래스 (@Entity)
            - JPA의 엔티티 클래스는 @Entity 주석이 달린 일반 Java 객체(POJO)임
            - 이 클래스는 데이터베이스의 테이블을 나타냄
            - 엔티티 클래스의 각 인스턴스는 테이블의 행에 해당함
        - 테이블 매핑 (@Table)
            - 엔티티 클래스가 매핑되는 테이블의 이름을 지정할 수 있음
            - 지정하지 않으면 테이블 이름은 기본적으로 엔티티 클래스 이름으로 지정됨
        - 열 매핑 (@Column)
            - 엔티티 클래스의 필드는 @Column 주석을 이용하여 데이터베이스 테이블의 열에 매핑됨
            - 지정하지 않으면 열 이름은 기본적으로 필드 이름으로 지정됨
        - 기본 키 매핑 (@Id)
            - 엔티티의 기본 키는 @Id 주석을 사용하여 지정됨
            - @GeneratedValue 주석을 사용하여 기본 키 값이 생성되는 방식을 정의할 수 있음 (예: 자동 증가)
        - 관계
            - JPA는 일대일(@OneToOne), 일대다(@OneToMany), 다대일(@ManyToOne), 다대다(@ManyToMany)와 같은 엔티티간의 관계 매핑을 지원함

4. Mermaid ERD 관계 표기법
    1) ||--o{ : 1대다 (OneToMany) 관계
        - || : 1 (하나)
        - -- : 기준
        - o{ : 다수 (여러 개)

5. 데이터베이스 모델링 / 요구사항분석

6. JPA 엔티티 및 저장소 생성