1. 서블릿 (Servlet)
    1) 웹 서버의 성능을 향상하기 위해 사용되는 자바 기반의 서버 사이드 컴포넌트
    2) 동적 웹 콘텐츠 생산을 위한 Java EE 표준 스펙
        - javax.servlet.Servlet Interface 구현체
    3) Servlet Container가 관리하는 Java 웹 컴포넌트
        - HelloServlet instance 단일 인스턴스 (Thread safe 필요)
            - HttpServletRequest
                - 파라미터 수동 파싱
                - getAttribute()
            - HttpServletResponse
                - PrintWriter 직접 사용

2. HelloServlet
    1) 스프링 부트 환경에서 서블릿 등록하고 사용하기
    2) 스프링 부트 서블릿 환경 구성
        - @ServletComponentScan
            - 스프링 부트는 서블릿을 직접(자동) 등록해서 사용할 수 있도록 지원함
        - @WebServlet
            - 서블릿 이노테이션
                - name : 서블릿 이름
                - urlPatterns : url 매핑
    3) HTTP 요청을 통해 매핑된 URL이 호출되면 서블릿 컨테이너가 다음 메서드를 실행함
        - protected void service(HttpServletRequest req, HttpServletResponse resp)
    4) 웹 브라우저 실행
        - http://localhost:8080/hello?username=world

3. HTTP 요청 메시지 로그로 확인
    1) 설정 추가

4. 웹 서버, 서블릿 컨테이너(내장 톰캣 서버) 동작

5. welcome 페이지 추가
    1) index.html
        - http://localhost:8080 호출 시 index.html 페이지가 열림

6. HttpServletRequest
    1) HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱함
    2) 그 결과를 HttpServletRequest 객체에 담아서 제공함
    3) HTTP 요청 메시지
        - START LINE
            - HTTP 메서드
            - URL
            - 쿼리 스트링
            - 스키마, 프로토콜
        - 헤더
            - 헤더 조회
        - 바디
            - form 파라미터 형식 조회
            - message body 데이터 직접 조회
    4) 임시 저장소 기능
    5) 세션 관리 기능

7. HTTP 요청 데이터
    1) HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법
    2) 3가지 방법 사용함
        - GET - 쿼리 파라미터
            - /url?username=hello&age=20
                   ---------------------
            - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
            - 예) 검색, 필터, 페이징 등에서 많이 사용하는 방식
        - POST - HTMP form
            - content-type : application/x-www-from-urlencoded
            - 메시지 바디에 쿼리 파라미터 형식으로 전달 username=hello&age=20
            - 예) 회원 가입, 상품 주문, HTML form 사용
        - HTTP message body에 데이터를 직접 담아서 요청하는 케이스
            - HTTP API에서 주로 사용, JSON, XML, TEXT

8. HTTP 요청 데이터 - POST HTML Form
    1) 주로 회원 가입, 상품 주문, 게시판 게시글 등에서 사용하는 방식임
    2) 특징
        - content-type : application/x-www-form-urlencoded
        - 메시지 바디에 쿼리 파라미터 형식으로 데이터를 전달함
            - username=hello&age=20

9. POSTMAN을 사용한 테스트
    1) 간단한 테스트에 HTML Form을 만들기가 귀찮음
        - 이때는 Postman을 사용하면 됨

    2) POST 전송 시
        - Body => x-www-form-urlencoded 선택
        - Headers에서 content-type : application/x-www-form-urlencoded로 지정된 부분 꼭 확인

10. HTTP 요청 데이터 - API 메시지 바디 - 단순 텍스트
    1) HTTP message body에 데이터를 직접 담아서 요청
        - HTTP API에서 주로 사용, JSON, XML, TEXT
        - 데이터 형식은 주로 JSON
        - POST, PUT, PATCH

11. HTTP 요청 데이터 - API 메시지 바디 - JSON
    1) HTTP API에서 주로 사용하는 JSON 형식으로 데이터를 전달해 보기
    2) JSON 결과를 파싱해서 사용할 수 있는 자바 객체로 변환하려면 Jackson, Gson 같은 JSON 변환 라이브러리를 추가해서 사용해야 함

12. HttpServletResponse - 기본 사용법
    1) HTTP 응답 메시지 생성
        - HTTP 응답코드 지정
        - 헤더 생성
        - 바디 생성
    2) 편의 기능 제공
        - Content-Type, 쿠키, Redirect

**. Servlet에서 Spring Bean으로 확장 과정
    1) Pure Servlet
        - 직접 HTTP 처리
        - web.xml 설정
        - 낮은 추상화
    2) DispatcherServlet
        - Front Controller
        - Spring 통합 시작
        - Handler 매핑
        - 중간 추상화
    3) Spring MVC
        - @Controller
        - 메서드 레벨 매핑
        - 파라미터 바인딩
        - 높은 추상화
    4) Spring Boot
        - 자동 설정
        - 내장 서버
        - @SpringBootApplication
        - 완전 자동화
    5) Full Spring
        - DI / IoC
        - AOP
        - Transaction