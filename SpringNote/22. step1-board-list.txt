* Step 1 : 게시글 목록 기능 구현 
    - 게시판 목록 조회 및 페이징 기능 구현 
    - 게시판의 핵심 기능인 게시글 목록 조회 기능 구현
        - 페이징, 카테고리 구분, 조회수/좋아요 표시 등의 기능 포함 
    - 작업순서
        - Entity/DTO 패키지 구조 리팩토링 
        - BaseEntity 생성 (공통 필드)                
        - Board Entity 생성
        - Enum 생성 (BoardStatus, BoardCategory)
        - BoardListDTO 생성
        - BoardRepository 생성
        - BoardService 생성
        - BoardController 생성
        - SecurityConfig 수정 
        - Thymleaf 템플릿 생성 
        - MySQL 테스트 데이터 삽입
        - 브라우저 테스트

1. Entity/DTO 패키지 리팩토링 
    1) 기존 프로젝트의 Entity와 DTO가 패키지 구조 없이 평면적으로 구성되어 있었음.
    2) 게시판 기능을 추가하면서 패키지 구조를 체계적으로 정리함 
    3) 영향 받는 파일
        - AuthController.java
        - MemberService.java 

2. Backend 구현 
    1) BaseEntity 생성 
        - 모든 Entity가 공통으로 가지는 createdAt, updatedAt 필드를 상속 
        - @CreatedDate, @LastModifiedDate 자동 동작 (JPA Auditing)

    2) BoardStatus Enum    

    3) BoardCategory Enum    
        - displayName 필드로 한글 이름 제공 
        - Thymleaf에서 board.category.displayName 으로 접근  

    4) Board Entity
        - BaseEntity 상속 => createdAt, updatedAt 자동 관리 
        - @ManyToOne => Member와 연관관계 
        - @Enumerated(EnumType.STRING) => Enum을 문자열로 저장 
        - 비즈니스 메서드 제공 (조회수 증가, 수정, 삭제)

    5) BoardListDTO
        - 목록에 필요한 최소한의 정보만 포함 
        - from()
            - 정적 팩토리 메서드로 Entity => DTO 변환 

    6) BoardRepository
        - Spring Data JPA 메서드 네이밍 규칙 사용
        - Page<Board> 반환 => 페이징 정보 포함 

    7) BoardService
        - ACTIVE 상태의 게시글만 조회
        - 최신순 정렬 (createdAt DESC)
        - Page<Board> => Page<BoardListDTO> 변환 

    8) BoardController
        - 1-based 페이징 시스템 구현
            - 목표
                - 사용자 친화적 URL: page=1부터 시작 (직관적)
                - 내부 호환성 유지 : Spring Data JPA는 0-based 사용
                - 일관된 페이징 UI : 네이버, 다음 스타일의 고정 그룹 방식
                    - 페이지를 10개씩 그룹으로 묶어서 표시
                    - 사용자 혼란 최소화
            
            - 그룹 1 (URL page=1~10)
                page=1: [1] 2 3 4 5 6 7 8 9 10
                page=5: 1 2 3 4 [5] 6 7 8 9 10
                page=10: 1 2 3 4 5 6 7 8 9 [10]
            
            - 그룹 2 (URL page=11~20)
                page=11: [11] 12 13 14 15 16 17 18 19 20
                page=16: 11 12 13 14 15 [16] 17 18 19 20
                page=20: 11 12 13 14 15 16 17 18 19 [20]
            
            - 그룹 내에서 고정

            - 페이지 그룹 계산
                - 현재 페이지가 속한 그룹 번호 계산 (1-based => 0-based로 변환)
                - 예시
                    - page=1 => currentGroup = (1-1) / 10 = 0 (1번째 그룹)
                    - page=5 => currentGroup = (5-1) / 10 = 0 (1번째 그룹)
                    - page=11 => currentGroup = (11-1) / 10 = 1 (2번째 그룹)
                    - page=16 => currentGroup = (16-1) / 10 = 1 (2번째 그룹)
                    - page=21 => currentGroup = (21-1) / 10 = 2 (3번째 그룹)
            
            - 페이지 번호 범위 계산
                - 그룹의 시작 페이지 번호 계산 (1-based)
                - 예시
                    - 그룹 0(1번째): 0 * 10 + 1 = 1 => 시작 페이지 1
                    - 그룹 1(2번째): 1 * 10 + 1 = 11 => 시작 페이지 11
                    - 그룹 2(3번째): 2 * 10 + 1 = 21 => 시작 페이지 21

                - 그룹의 종료 페이지 번호 계산 (1-based)
                - 예시(총 25 페이지)
                    - 그룹 0: min(1+10-1, 25) = min(10, 25) = 10 => 1~10 페이지
                    - 그룹 1: min(11+10-1, 25) = min(20, 25) = 10 => 11~20 페이지
                    - 그룹 2: min(21+10-1, 25) = min(30, 25) = 25 => 21~25 페이지
                - 공식 : Math.min(startPage + pageGroupSize - 1, totalPages)
                    - startPage + pageGroupSize - 1 : 그룹의 이론적 끝 페이지
                    - totalPages : 실제 전체 페이지 수
                    - 둘 중 작은 값 선택 (마지막 그룹은 10개 미만일 수 있음)
                
                - 그룹 이동 버튼 표시 계산 (<< >>)
                    - 이전 그룹 버튼 표시 여부
                        - 조건 : 첫번째 그룹이 아닐 때 (startPage > 1)
                        - 예시 : 2번째 그룹(11~20)에 있을 때 [이전 그룹] 버튼 표시
                                클릭 시 1번째 그룹(1~10)으로 이동
                    
                    - 다음 그룹 버튼 표시 여부
                        - 조건 : 마지막 그룹이 아닐 때 (startPage < 2)
                        - 예시 : 1번째 그룹(1~10)에 있을 때 [다음 그룹] 버튼 표시
                                클릭 시 2번째 그룹(11~20)으로 이동
                
            - Model에 페이징 정보 전달
    
    9) SecurityConfig 수정
        - /boards/** URL을 누구나 접근 가능하도록 설정
        - 로그인 없이도 게시글 목록/상세 조회 가능

3. Frontend 구현
    1) fragment 레이아웃 적용
        - 공통 레이아웃 구조를 사용
            - 전체 레이아웃 : common/layout.html
            - 네비게이션 바 : common/header.html
            - 푸터 : common/footer.html
    2) header.html 수정
        - 게시판 메뉴 추가
    3) board/list.html
        - Thymeleaf 레이아웃 프래그먼트 방식으로 공통 레이아웃 적용
            
            - xmlns:th - Thymeleaf 네임스페이스 (Thymeleaf 문법 사용 선언)
            - xmlns:sec - Spring Security 네임스페이스 (sec:authorize 등 보안 관련 기능 사용)

            - th:replace 속성
                - <html> 태그 전체를 common/layout.html의 layout 프래그먼트 교체
                - layout 프래그먼트의 4가지 parameter를 전달
                    - ~{::title} - 현재 페이지의 <title> 태그 내용
                    - ~{::content} - 현재 페이지의 th:fragment="content" 블록 전체
                    - ~{::css} - 현재 페이지의 th:fragment="css" 블록
                    - ~{::scripts} - 현재 페이지의 th:fragment="scripts" 블록