* 단계별 구현 로드맵
    1) Step 1(s1) : 게시글 목록 조회
        - 페이징 처리 (10개씩)
        - 카테고리 색상 표시
        - 페이지 그룹 네비게이션 (1~10, 11~20 등)
        - 작성자 정보 포함 (N+1 문제 해결)
    2) Step 2 (s2) : 게시글 상세 조회
        - 게시글 전체 내용 표시
        - 조회수 자동 증가
        - 카테고리 배지 표시
        - 목록으로 돌아가기 (원래 페이지 유지)
    3) Step 3 (s3) : 게시글 작성
        - 글쓰기 폼 (제목, 본문, 카테고리)
        - 유효성 검사
        - 저장 기능
        - 로그인 사용자만 접근 가능
    4) Step 4 (s4) : 게시글 수정
        - 수정 폼 (작성 폼 재사용)
        - 작성자 본인 확인 (Spring Security)
        - 수정 버튼 활성화
    5) Step 5 (s5) : 게시글 삭제
        - 소프트 삭제 (status = DELETED)
        - 작성자 본인 확인
        - 삭제 버튼 활성화
    6) Step 6 (s6) : 게시글 검색
        - 제목, 본문, 작성자 검색
        - 카테고리별 필터링
    7) Step 7 (s7) : 댓글 기능
        - 댓글 작성/수정/삭제
        - 댓글 수 표시
    8) Step 8 (s8) : 좋아요 기능
        - 좋아요 추가/취소
        - 좋아요 수 실시간 업데이트

1. 게시글 상세 조회 DTO

2. Repository 메서드 추가

3. Service 계층 구현
    1) JPA 더티체킹 (Dirty Checking)
        - JPA가 엔티티의 변경사항을 자동으로 감지하여 데이터베이스에 UPDATE 쿼리를 실행하는 기능임
        - JPA는 영속성 컨텍스트(Persistence Context)에서 엔티티를 관리함
        - 트랜잭션 시작 시 엔티티의 스냅샷(Snabshot)을 저장함            
        - 트랜잭션 종료 시 스냅샷의 저장값과 현재 엔티티를 비교함
        - 변경사항이 있으면 자동으로 UPDATE 쿼리를 실행함
            - @Transactional을 빼먹으면 종료 시 변경사항이 DB에 반영되지 않음
    2) JPA 더티체킹 장점
        - 개발자가 UPDATE 쿼리를 직접 작성할 필요 없음
        - 코드가 깔끔하고 객체지향적인 측면이 있음
        - 비즈니스 로직에 집중 가능
    3) @Transactional 시작
            |
           \|/
        게시글 조회 (SELECT)
            |
           \|/
        조회수 증가 (Entity 변경)
            |
           \|/
        @Transactional 종료 => update 자동 실행

4. Controller 엔드포인트
    1) 패턴
        - GET /boards/{id}
    2) 예시
        - /boards/123?page=3 ==> 123번 게시글 (목록 3페이지에서 옴)

5. 상세 페이지 뷰
    1) detail.html
    2) 주요 구성
        - 게시글 헤더
        - 게시글 본문
        - 게시글 푸터
