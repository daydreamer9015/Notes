1. 기본 개념
    1) 동기 (Synchronous) 처리
        - 작업1 실행 -> 완료 대기
        - 작업2 실행 -> 완료 대기
        - 작업3 실행 -> 완료 대기

        - 총 시간 = 작업1 + 작업2 + 작업3
        - 한 작업이 끝날 때까지 대기
        - 브라우저가 멈춘 것처럼 보임
    2) 비동기 (Asynchronous) 처리
        - 작업1 시작 -> 다음 코드 실행
        - 작업2 시작 -> 다음 코드 실행
        - 작업3 시작 -> 다음 코드 실행

        - 총 시간 = 가장 긴 작업 시간
        - 여러 작업이 동시 처리
        - UI가 멈추지 않음
    3) 비동기 전송 (Asynchronous Transmission)
        - 작업이 완료될 때까지 기다리지 않고 다음 작업으로 넘어가기 위해 데이터를 전송하거나 요청하는 프로세스를 말함
        - 데이터 전송이나 요청이 처리하는 동안 다른 작업을 계속할 수 있음
            - 어플리케이션의 성능과 응답성이 향상될 수 있음
        - 일반적으로 서버에 요청을 하고 서버의 응답을 기다리는 동안 UI를 차단하지 않는 작업이 포함됨
        - 서버가 응답하면 콜백 함수나 Promise가 응답을 처리함
    4) JavaScript의 비동기 전송 기술
        - 역할
            - 데이터를 비동기적으로 전송
            - 서버의 응답을 처리할 수 있음
        - 두가지 방식
            - fetch를 사용한 비동기 통신
            - async/await를 사용한 비동기 통신

2. Promise
    1) 비동기 작업의 미래의 값을 나타내는 약속 객체
        - 예) 커피 주문 --> 진동벨 받음 (Promise 객체 생성)
                        --> 대기 상태 (Pending)
              다른 일을 하며 기다림 (비동기 처리)
                        --> UI는 멈추지 않음 (코드는 계속 실행됨)
              -진동벨 울림 --> 커피 받음 (성공)
                            --> resolve (커피) (Fulfilled 상태)
              -"재료 소진" 안내  --> (실패)
                            --> reject("재료 없음") (Rejected 상태)
    2) JavaScript의 내장 객체
    3) 비동기 작업의 최종 완료 또는 실패를 나타내는 객체임
        - 비동기 작업이 끝나면 성공값 또는 실패 이유를 담아서 전달
    4) ES6(2015)에서 도입
    5) Promise 체이닝
        - 데이터가 자동으로 전달되는 원리
        - 각 then()은 새로운 Promise 객체를 반환함
        - then() 안에서 return한 값이 다음 then()의 매개변수가 됨
        - 이 과정이 자동으로 일어남 (JavaScript 엔진이 처리)
    6) then(), catch(), finally()로 결과 처리
    7) 3가지 상태
        - Pending => Fulfilled or Rejected
    8) Fetch API
        - 브라우저에 내장된 JavaScript API
        - HTTP 요청을 보내고 응답을 받는 현대적인 방법
        - Promise 기반으로 비동기 처리
        - XMLHttpRequest보다 간결하고 강력한 기능
        
        - Promise 반환 => .then() 체이닝 가능
        - 간결한 문법 (코드 가독성 향상)
        - 스트림 처리 (대용량 데이터 효율적 처리)
        - 모든 최신 브라우저 지원
    9) Async/Await
        - Promise를 쉽게 사용할 수 있도록 등장
        - ES8(ES2017)에서 도입된 JavaScript 비동기 처리 문법
        - Promise 기반이지만 훨씬 읽기 쉽고 직관적인 코드 작성 가능