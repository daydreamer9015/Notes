* 댓글 기능 개요
    - 주요 기능
        1) 댓글 목록 조회 - 특정 게시글의 모든 댓글 조회
        2) 댓글 작성 - 로그인한 사용자가 댓글 작성
        3) 댓글 수정 - 본인이 작성한 댓글만 수정 가능
        4) 댓글 삭제 - 본인이 작성한 댓글만 삭제 가능 (소프트 삭제)

* 아키텍처 구조
                    View Layer
    (detail.html - Thymeleaf + JavaScript + AJAX)
                        ▲
                        |   HTTP (JSON)
                        ▼
                Controller Layer
            (CommentController - REST API)
                        ▲
                        |
                        ▼
                Service Layer
            (CommentService - 비즈니스 로직)
                        ▲
                        |
                        ▼
                Repository Layer
            (CommentRepository - 데이터 access)
                        ▲
                        |
                        ▼
                Entity Layer
            (Comment, CommentStatus - 데이터베이스 매핑)
                        ▲
                        |
                        ▼
                    Database
            (MySQL/MaridDB, Postgresql)

* 데이터베이스 ERD

    Board
   --------
    id(PK)
    title
    content
    ...
                    Comment
                  ------------
                    id(PK)
                    content
                    board_id(FK)
                    author_id(FK)
                                        Member
                                      ------------
                                        id(PK)
                                        name
                                        email
                                        ...

* 핵심 개념
    1. 소프트 삭제 (Soft Delete)
        - 실제로 데이터베이스에서 레코드를 삭제하지 않음
        - status 필드를 DELETED로 변경하여 논리적 삭제
        - 데이터 복구 가능, 히스토리 추적 가능
    2. REST API 설계
        - GET           /api/comments/boards/{boardId}      - 댓글목록조회
        - POST          /api/comments/boards/{boardId}      - 댓글 작성
        - PUT           /api/comments/{commentId}           - 댓글 수정
        - DELETED       /api/comments/{commentId}           - 댓글 삭제
    3. 권한 검증
        - 댓글 작성 : 로그인한 사용자만 가능
        - 댓글 수정/삭제 : 작성자 본인만 가능
    4. N+1 문제 해결
        - Fetch Join 사용으로 성능 최적화
        - 댓글 조회 시 작성자 정보를 함께 가져옴

* 개발 순서
    - 뒷단부터 앞단까지 순차적으로 개발
    - 1) Entity 계층 - 데이터베이스 테이블 정의
      2) Repository 계층 - 데이터 액세스 로직
      3) DTO 계층 - 데이터 전송 객체 정의
      4) Service 계층 - 비즈니스 로직 구현
      5) Controller 계층 - REST API 엔드포인트 구현
      6) View 계층 - 사용자 인터페이스 구현

* 포인트
    1) JPA 연관관계 매핑 - @ManyToOne, @JoinColumn
    2) Repository 메서드 쿼리 - JPQL, Fetch Join
    3) DTO 패턴 - Entity와 DTO 분리
    4) REST API 설계 - RESTful 원칙
    5) AJAX 통신 - Fetch API 사용
    6) XSS 방지 - HTML 이스케이프 처리
    7) CSRF 토큰 - Spring Security 보안