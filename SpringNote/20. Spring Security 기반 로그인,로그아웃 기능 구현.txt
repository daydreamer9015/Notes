Spring Security 기반 로그인 기능 구현

1. 로그인 구조 
    1) Spring Security 기반 인증/인가 시스템 
    2) Form Login 방식 (이메일/비밀번호)
    3) BCrypt 비밀번호 암호화 
    4) Custom Handler 로그인 성공/실패 처리 

2. 단계별 구현 
    1) Member Entity - UserDetailsService 구현  

    2) MemberRepository - 이메일 조회 메서드 

    3) CustomUserDetailsService - DB 연동 인증 
        - Spring Security와 우리 DB를 연결하는 다리 
            - "이 사용자가 진짜 맞는지 확인해줘!"
                - 어디서 확인? => 우리 DB에 있는 회원 정보
        - loadUserByUsername() 
            - Spring Security가 로그인 시 자동으로 호출하는 서비스 
        - Spring Security 범용 보안 프레임워크 
            - 우리 프로젝트: Member 테이블, MemberRepository     
            - 연결 다리 필요    

    4) CustomAuthenticationSuccessHandler - 로그인 성공 
    
    5) CustomAuthenticationFailureHandler - 로그인 실패 

    6) SecurityConfig 설정 
        - SecurityConfig 동작하려면 반드시 필요한 3가지 Bean 
            - PasswordEncoder
                - 비밀번호 암호화/검증
            - CustomUserDetailsService
                - DB에서 사용자 정보 조회 
            - DaoAuthencationProvider
                - PasswordEncoder와 CustomUserDetailsService을 연결
                - 인증 처리 총괄 매니저 
                    - Spring Security가 인증할 수 있게 해주는 핵심 연결고리 
                                                
    7) login.html - 로그인 폼 
    8) AuthController - 로그인 페이지 제공                                                 

-----------------------------------------------------

Spring Security 기반 로그아웃 기능 구현

1. 로그아웃 구조 
    1) Spring Security 기반 로그아웃 처리 
    2) Custom Handler 로그아웃 전/후 처리 
    3) 세션 무효화 및 쿠키 삭제 
    4) 로깅 및 보안 감사 

2. 구현할 기능 
    1) 로그아웃 버튼 클릭 
    2) Spring Security가 자동으로 로그아웃 처리 
    3) 세션 무효화 및 쿠키 삭제
    4) 로그아웃 로깅 
    5) 로그인 페이지로 리다이렉트     

3. 단계별 구현 
    1) 로그아웃 핸들러 (CustomLogoutHandler) 
        - 로그아웃 전 처리 로직
        - 세션 정보 로깅
        - 로그아웃 통계 수집 
    
    2) 로그아웃 후 처리 (CustomLogoutSuccessHandler)        
        - 로그아웃 완료 후 실행되는 핸들러 
            - 리다이렉트, 메시지 표시 

    3) SecurityConfig - 로그아웃 설정 

    4) header.html - 로그아웃 버튼 

    5) AuthController - 로그아웃 메시지 처리 