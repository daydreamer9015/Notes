1. Git의 역사와 버전 관리 (VCS version control system)
    1) 이런 경험이 있지 않나요?
        - final
        - final_v2
        - final_final
        - final_최종본

        - v1.0
          v2.0
          v3.0 : 보통 이쯤부터 안정 version
          v4.0
          ...

    2) 어떤 문제점이 있을까요?
        - 변경사항에 대한 이력을 알기 어려움
        - v4.1 ~ v6.0 만약 숫자를 잘못 기재했다면?
        - 실수로 파일을 삭제할 수 있음
        - 다른 파일로 쉽게 덮어씌워질 수 있음

    3) 버전 관리(Version Control System)
        - 소프트웨어 파일의 변화를 기록하는 것
        - 시간이 지나서도 특정 시점의 파일을 불러올 수 있는 것
        - 최신 파일에 문제가 있을 때, 최신 파일을 삭제하고 기버전으로 돌아갈 수 있는 것
        - 두 시점의 파일을 비교할 수 있는 것

2. 버전 관리 시스템
    1) Version Control System(VCS)라고 함
    2) 개발자, 디자이너

3. 버전 관리의 유형
    1) 로컬 버전 관리
        - 로컬 환경에서(내 PC에서) 사용할 수 있는 버전 관리
    2) 중앙집중식 버전 관리 (Centralized VCS)
        - 협업을 위한 버전 관리
        - Subversion (SVN)
    3) 분산 버전 관리 (De-Centralized VCS)
        - 각 클라이언트가 모든 정보를 다 가지고 있는 버전 관리
        - Git

4. Git의 역사
    1) 1990년대 리눅스가 개발될 때, 단순 압축 파일로 관리되었음
    2) 리눅스는 규모가 큰 오픈소스 프로젝트
    3) 버전 관리의 한계에 봉착
    4) 2002년에 BitKeeper라는 상용 DVCS를 사용하기 시작
        - 상용 프로그램이지만 BitKeeper측에서 리눅스 커뮤니티에게 무료로 사용할 수 있게 허락
        - 그러다 BitKeeper의 이용 약관을 위반하는 일이 발생
        - 이후 BitKeeper는 무료로 사용하지 못하게 제한
    5) 2005년에 자체 버전 관리 시스템을 만들기로 결정
        - 리눅스 창시자인 리누스 토르발즈
        - 2주만에 만들었다고 함
        - 다만 learning curve가 있어서 배우는 데까지 시간이 걸릴 수 있음

5. Git의 기초
    1) 파일을 스냅샷으로 취급하고 크기가 아주 작음
    2) 커밋(하나의 단위)/저장할 때 그 순간을 중요하게 여김
    3) 파일이 달라지지 않으면 성능을 위해 새로 저장하지 않음
    4) 이전 상태의 파일에 대한 링크만 저장
        - 데이터를 스냅샷의 스트림(묶음)처럼 취급하고

6. 로컬 환경에서 작업 가능
    1) 로컬에서 명령어를 수행할 수 있기 때문에 네트워크가 필요없음 (모든 저장소 데이터를 로컬에 가지고 있음)
    2) 속도가 매우 빠름
    3) 네트워크가 연결되기 전까지 로컬 환경에서 커밋을 만들어 두고, 네트워크가 연결되면 리모트 저장소에 푸시하면 됨