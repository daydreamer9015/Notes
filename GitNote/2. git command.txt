1. Git 기초 명령어 (명령어 맨 앞에 git 필수로 써야 함)
    1) git 버전 확인
        - git --version
    2) 현재 git 설정 확인
        - git config --list
    3) 사용자 정보가 없다면 설정
        - git config --global user.name "Olivia"
        - git config --global user.email something9015@gmail.com

2. 파일의 Life Cycle (Git 관점에서)
    1) Working 디렉토리의 모든 파일은 Tracked와 Untracked로 나뉨
    2) Untracked
        - 관리 대상이 아님을 나타내며, 스냅샷에도 Staging Area에도 포함되지 않은 파일
    3) Tracked
        - 관리 대상임을 나타냄
        - UnModified(수정하지 않음), Modified(수정함), Staged(커밋으로 저장소에 기록함) 상태로 구분됨

3. Git의 세 가지 단계
    1) Working Directory - git과 무관한 내가 현재 쓰고 있는 디렉토리
    2) Staging Area - 인덱싱 하기 / 커밋을 하기 전 모아두는 영역
    3) Git Directory

4. Git의 세 가지 상태
    1) Modified
        - 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 상태
    2) Staged
        - 현재 수정한 파일을 곧 커밋할 것이라는 상태
    3) Committed
        - 데이터가 로컬 데이터베이스에 안전하게 저장(커밋)된 상태

5. Git 저장소(repository)
    1) Git 저장소 초기화
        - git init
    2) .git 폴더 확인 (숨김 폴더)
        - ls -al
    3) 저장소 상태 확인
        - git status
    4) Staging Area에 파일 추가하기
       Staging Area에 변경 사항 올리기  
        - git add 파일명.확장자
       여러 파일 동시 추가하기
        - git add 파일명.확장자 파일명.확장자
       모든 변경사항 스테이징
        - git add *
    5) Commit 하기
        - git commit
        - git commit -m "메시지"
        - 버전 만드는 것을 Git에서는 'commit한다' 고 함        
        - git commit -am "메시지" 
            - 스테이징과 커밋 한꺼번에 처리하기 (git add+git commit -m "메시지")
    6) Commit History 확인
        - git log
        - git log --oneline : 한 줄 로그 보기
        - git log --oneline --graph : 로그를 좀 더 그래픽st로 보이도록
        - git log --stat : 커밋 통계
        - commit을 하면 commit hash(=git hash) 값이 생성됨 : commit을 구별하는 아이디
    7) vim 파일명.확장자
        - i 눌러서 insert mode로 진입 후 내용 쓰고 esc 눌러서 out
        - shift + ; 누른 후 wq (write quit)
        - 내용 변경 완성
    8) 변경 사항 확인하기
        - git diff
    9) 방금 commit한 메시지 수정
        - git commit --amend : 이후 나오는 화면에서 i 누른 뒤 메시지 수정
    
6. 작업 되돌리기
    1) 작업 트리에서 수정한 파일 되돌리기
        - git restore : 파일을 수정했을 때 스테이징(git add)하지 않은 상태에서 수정을 취소함 (git add 전)
        - git restore -- staged : 수정된 파일을 스테이징(git add)까지 했을 때 스테이징을 취소하는 방법 (git add 후)
    2) 최신 commit(HEAD가 가리키는 것) 되돌리기(git Directory에 있는 것)  
        - git reset (--mixed) HEAD^ : 수정된 파일을 staging(git add) 하고 commit까지 했을 때 가장 마지막에(가장 최신) 한 commit을 취소하는 방법
                            파일을 unstaged 상태로 작업 디렉토리에 보관함함
        - git reset --soft HEAD^ : commit을 취소하고 파일을 staged 상태로 작업 디렉토리에 보관함
    3) 특정 commit 되돌리기
        - git reset hash값 : 내용은 그대로 남아있고 commit된 것만 삭제
            예) git reset A : A commit 이후에 만들었던 commit을 삭제하고 A commit으로 이동함
        - git reset --hard hash값 : 내용까지 다 삭제
    4) commit 변경 이력 취소하기
        - git revert : 변경 사항은 취소하고 commit은 남겨두는 경우 (history는 남길 수 있음)
