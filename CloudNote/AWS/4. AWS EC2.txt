1. intro
    1) AWS 활용해서 웹 서비스 운영 시 가장 널리 사용하는 서비스가 EC2임
    2) 배포(deployment)
        - 우리가 만든 서비스를 서버나 클라우드 환경에 업로드 하는 것
        - 일반적으로 웹서비스를 개발할 때 로컬호스트(localhost)라는 자신의 컴퓨터 주소를 사용함
            - 다른 컴퓨터에서는 접근할 수 없는 주소임
    3) IP 주소
        - 인터넷에서 특정 컴퓨터를 가리키는 주소
        - ping 명령어 사용하면 특정 도메인 주소와 네트워크 연결 상태 확인할 수 있음
    4) 포트
        - 한 컴퓨터 내에서 실행되는 특정 프로그램의 주소
        - 잘 알려진 포트(well-known port)
            - 0번부터 1023번까지 특정 용도로 사용(권장) - 80은 웹서비스 용도
                - 역할이 정해져 있는 포트
                - 예) 22번 포트 : SSH
                      80번 포트 : HTTP  
                      443번 포트 : HTTPS
    5) EC2 인스턴스
        - EC2에서 빌리는 컴퓨터 한 대를 뜻함
        - EC2 인스턴스 = 컴퓨터 한 대
        - OS 이미지 (컴퓨터의 핵심 SW)
        - 인스턴스 유형
        - 스토리지(HDD, SSD)     

    6) EC2 사용하는 이유
        - 관리 부담 절감
        - 손쉬운 보안 설정

2. 인스턴스 시작하기
    1) 리전 선택하기
    2) 인스턴스 시작
        - 인스턴스 시작 화면 들어가기
            - 이름 및 태그  예) dev-portfolio-server
            - 애플리케이션 및 OS 이미지 (Amazon Machine Image)
                - Ubuntu Server 24.04 LTS (HVM),EBS General Purpose (SSD) Volume Type. Canonical, Ubuntu, 24.04, amd64 noble image 
            - 인스턴스 유형 : t2.micro
            - 키 페어 설정 : (기본값)
            - 네트워크 설정
                - 편집
            - 스토리지 구성
    3) 인스턴스에 원격 접속하기
        - 연결

3. 탄력적 IP
    1) EC2 인스턴스를 중지하고 다시 시작할 때마다 퍼블릭 IP 주소가 변경됨
    2) AWS에서는 탄력적 IP를 제공해서 IP가 변경되지 않도록 해줌
    3) 고정된 IP 주소

4. EC2에 백엔드 서버 배포하기
    1) EC 인스턴스 접속하기
    2) JDK 설치하기
        - ubuntu@ip-172-31-43-166:/$ sudo apt update
            - 패키지 관리 시스템 정보 업데이트
        - ubuntu@ip-172-31-43-166:/$ sudo apt install openjdk-17-jdk -y
        - ubuntu@ip-172-31-43-166:/$ java -version
    3) 깃허브에서 프로젝트 가져오기
        - ubuntu@ip-172-31-43-166:/$ git clone https://github.com/campusseven24/aws-ec2-springboot.git
    4) application.yml 파일 만들기
        - ubuntu@ip-172-31-43-166:~/aws-ec2-springboot/src/main/resources$ vi application.yml
            server:
                port: 80
    5) 프로젝트 실행하기
        - 실행하기 전에 빌드 과정 거쳐야 함
        - ubuntu@ip-172-31-40-113:~/aws-ec2-springboot/build/libs$ sudo nohup java -jar aws-ec2-springboot-0.0.1-SNAPSHOT.jar &

    6) 서버 상태 확인하기
        - sudo lsof -i:80
        COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
        java    4421 root    9u  IPv6  19351      0t0  TCP *:http (LISTEN)

    7) IP 주소로 접속하기

    8) 서버 종료하기 (PID)
        - sudo kill 4421

5. EC2에 익스프레스 서버 배포하기
    1) EC2 인스턴스 접속하기
    2) Node.js 설치하기
        - 22 버전 사용
        - 익스프레스 4.x.x 버전

        - 터미널
            - ubuntu@ip-172-31-41-5:~$ sudo apt update
            - ubuntu@ip-172-31-41-5:~$ sudo apt install -y curl
                - curl 
                    - 대표적인 용도 : 웹 페이지 요청
                    - 예) curl https://google.com

                 - ubuntu@ip-172-31-41-5:~$ curl -fsSL https://deb.nodesource.com/setup_22.x -o nodesource_setup.sh
                   ubuntu@ip-172-31-41-5:~$ sudo -E bash nodesource_setup.sh
                   ubuntu@ip-172-31-41-5:~$ sudo apt install -y nodejs
                   ubuntu@ip-172-31-41-5:~$ node -v     // Node.js가 잘 설치되었는지 확인
                   ubuntu@ip-172-31-41-5:~$ git clone https://github.com/campusseven24/aws-ec2-express.git
    3) 깃허브에서 익스프레스 프로젝트 git clone
    4) .env라는 파일 만들기
        - 보안을 유지해야 하는 민감한 정보를 포함하는 파일
        - 깃으로 버전 관리하지 않음

        - ubuntu@ip-172-31-41-5:~/aws-ec2-express$ vim .env
    5) pm2로 익스프레스 서버 실행하기
        - pm2 설치 : ubuntu@ip-172-31-41-5:~/aws-ec2-express$ sudo npm i -g pm2
        - pm2를 활용해서 익스프레스 서버 실행 : ubuntu@ip-172-31-41-5:~/aws-ec2-express$ sudo pm2 start app.js
        - 앱 오류 로그 확인 : ubuntu@ip-172-31-41-5:~/aws-ec2-express$ sudo pm2 log
        - dotenv 설치 : ubuntu@ip-172-31-41-5:~/aws-ec2-express$ npm install dotenv
    6) IP 주소로 접속하기
    7) 익스프레스 서버 종료하기
        - ubuntu@ip-172-31-41-5:~/aws-ec2-express$ sudo pm2 kill