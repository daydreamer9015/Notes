1. Docker란?
    1) 2013년 3월 처음으로 세상에 알려짐
    2) 컨테이너 기반의 오픈소스 가상화 플랫폼
    3) 어플리케이션을 신속하게 구축, 테스트 및 배포할 수 있는 소프트웨어 플랫폼 (OS)
    4) 소프트웨어를 컨테이너라는 표준화된 유닛으로 패키징하며 이 컨테이너에는 라이브러리, 시스템 도구, 코드, 런타임 등 소프트웨어를 실행하는 데 필요한 모든 것이 포함됨
    5) 환경에 제한받지 않고 어플리케이션을 신속하게 배포 및 확장
    6) 코드를 실행하는 표준 방식을 제공하며 컨테이너를 위한 운영 체제
    7) 캐발자가 컨테이너를 빌드(CPU가 이해할 수 있는 코드로 만듦) 배포, 실행, 업데이트 등 관리할 수 있는 오픈소스 플랫폼
    8) 기업에서 클라우드 네이티브 개발 및 하이브리드 멀티클라우드 환경으로 전환함에 따라 컨테이너가 더욱 널리 사용되고 있음
        - 클라우드 네이티브 (Cloud Native)
            - 클라우드 컴퓨팅의 장점을 최대한 활용할 수 있도록 어플리케이션을 개발하고 운영하는 방법론

2. 가상화(Virtualization)란?
    1) 가상 머신
        - OS와 하드웨어 드라이버를 host의 운영체제 즉, 커널단이 아닌 유저단에 가상화를 구현하는 방식
        - 가상화를 사용하는 주목적은 Application을 사용하기 위함인데 매번 운영체제를 따로 설치해주는 것은 host computer 입장에서는 부담스러운 일
        - 하이퍼바이저 (Hypervisor)
            - 호스트 컴퓨터에서 다수의 운영체제(게스트 OS)를 동시에 실행하기 위한 논리적 플랫폼을 말함
            - 가상화 머신 모니터 or 가상화 머신 매니저라고도 부름
            - 제품
                - VirtualBox
                - VMWare Workstation
        - 하이퍼바이저 가상화
    2) 도커 컨테이너
        - 도커엔진을 이용하여 (결과적으로) 컨테이너라는 것을 구동함
        - 컨테이너는 어플리케이션을 사용할 수 있는 가상환경이고 별도의 운영체제(게스트 OS)가 필요하지 않음
        - 이를 통해 우리 목적인 어플리케이션 사용도 가능하고 호스트 환경에도 부담이 덜 됨
        - 컨테이너 가상화
        - 도커를 사용하는 목적
            - 가상화 서버를 빠르고 가볍게 운영하기 위해 사용
    3) VM 기반 가상화와 도커(컨테이너) 기반 가상화 비교
        - VM 기반 가상화 : 하드웨어를 가상화(공유)하는 VM
        - 도커(컨테이너) 기반 가상화 : 커널을 공유하는 방식
            - 실행 속도가 빠르고, 성능상 손실이 거의 없음
    4) WSL2
        - Windows Subsystem for Linux 의 약자

3. Docker를 왜 알아야 하는가?
    1) 핵심 장점
        - 이식성
            - 특정 프로그램을 다른 곳으로 쉽게 옮겨서 설치 및 실행할 수 있는 특성
    2) 매번 귀찮은 설치 과정을 일일히 거치지 않아도 됨
    3) 항상 일관되게 프로그램을 설치할 수 있음 (정형화 되어 있음)
        - 버전, 환경 설정, 옵션, 운영 체제 등
    4) 각 프로그램이 독립적인 환경에서 실행되기 때문에 특정 프로그램 간에 서로 충돌이 일어나지 않음

4. 이미지와 컨테이너
    1) Docker
        - 컨테이너를 이용하여 각각의 프로그램을 분리된 환경에서 실행 및 관리할 수 있는 툴(이자 미들웨어)
    2) 컨테이너 (Container)
        - 하나의 컴퓨터 환경 내에서 독립적인 환경을 구성해서, 각 환경에 프로그램을 별도로 설치할 수 있게 만든 개념
            - 독립성
                -디스크(저장 공간)을 독립적으로 관리
                    - 각 컨테이너마다 서로 각자의 저장 공간을 가짐
                    - A 컨테이너 내부에서 B 컨테이너 내부에 있는 파일에 접근할 수 없음
                - 네트워크 (IP, Port)
                    - 각 컨테이너마다 고유의 네트워크를 가지고 있음
                    - 컨테이너는 각자의 IP 주소를 가지고 있음
        - 하나의 컴퓨터 환경 내에서 여러 개의 미니 컴퓨터 환경을 구성할 수 있는 형태
    3) 호스트(Host) 컴퓨터
        - 컨테이너를 포함하고 있는 컴퓨터
    4) 이미지(Image)
        - 프로그램을 실행하는데 필요한 설치 과정, 설정, 버전 정보 등을 포함하고 있음
        - 프로그램을 실행하는 데 필요한 모든 것을 포함하고 있음
    5) 도커 이미지 & 도커 컨테이너 (컨테이너를 구동하려면 이미지가 있어야 함)
        - 도커 이미지
            - 특정 서버 또는 어플리케이션의 실행할 수 있는 상태를 저장한 압축파일
        - 도커 컨테이너
            - 도커 이미지를 실행한 인스턴스
            - 필요한 요소를 포함하는 SW 패키지
            - 실행 가능한 SW + 실행에 필요한 환경

5. 도커
    1) 리눅스 기반의 컨테이너 기술
    2) Windows에서 Docker를 사용하려면 Linux canal에 접근할 수 있는 방법인 WSL2를 사용함
        - WSL2
            - 리눅스용 하위 시스템(Windows Subsystem for Linux)
            - 윈도우10과 윈도우11에서 네이티브로 리눅스 실행 파일을 실행하기 위한 호환성 계층임
    3) 컨테이너는 내부적으로 호스트 OS의 커널을 공유
        - 결과적으로 리눅스 OS를 실행하기 위해서는 포스트 OS에 리눅스가 필요함
    4) 컨테이너 실행
        - docker [container] run 옵션
            - docker container 생성 및 실행 기능
            - 필요시 이미지 다운로드 기능도 수행
                - docker pull + docker create + docker start
                 -------------  -------------- --------------
                - image 내려받기  컨테이너 생성    컨테이너 실행
                - 예) docker run -d -p 8071:80 --name myhttpd1 httpd
