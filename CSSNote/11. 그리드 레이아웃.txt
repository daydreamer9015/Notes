1. Intro
    1) 플렉스 박스 레이아웃 사용하면 웹 요소를 쉽게 배치할 수 있음
    2) 레이아웃 복잡해지면 플렉스 박스 레이아웃만으로는 까다로움
    3) => 등장한 것이 CSS 그리드 레이아웃임
    4) 격자 형태로 요소 배치 가능

2. CSS 그리드 레이아웃에서 사용하는 용어
    1) 그리드 항목 배치할 때 가로와 세로 방향 모두 사용함
        - 플렉스 항목은 1차원
        - 그리드 레이아웃은 2차원
    2) 그리드 레이아웃을 만들 때도 배치할 항목을 컨테이너로 묶어 주어야 함
        - 부모 요소를 그리드 컨테이너
        - 자식 요소를 그리드 항목 또는 셀(cell)이라고 함
            - 가로방향을 가리키는 행(row), 세로방향을 가리키는 열(column)로 항목을 배치함
        - 필요한 경우 그리드 항목 사이에 간격을 둘 수 있음

3. CSS 그리드 레이아웃에서 항목을 배치하는 속성
    1) display의 속성값
        - grid : 블록 레벨의 그리드 컨테이너를 만듦
        - inline-grid : 인라인 레벨의 그리드 컨테이너를 만듦

    2) 열과 행을 지정하는 속성
        - grid-template-columns : 그리드의 열 크기(너비)와 개수를 지정
            - 예) grid-template-columns: 100px 200px 300px
        - grid-template-rows : 그리드의 행 크기(너비)와 개수를 지정
            - 예) grid-template-rows: 50px 100px

    3) 동적으로 만들어진 행의 높이 지정하는 속성 : grid-auto-rows
        - 사용자가 어떤 선택을 하느냐에 따라 화면에 표시할 행이 5개일 수도, 10개일 수도 있음
        - 동적인 웹 사이트는 행의 개수를 미리 정할 수 없는 경우가 대부분임

4. 상대적인 크기 지정하는 단위 : fr (fraction)
    1) 그리드 레이아웃에서는 상대적인 크기를 지정할 수 있도록 fr 단위를 사용함
        - 예) grid-template-columns: 1fr 2fr 3fr;
              grid-template-columns: 2fr 1fr 2fr;

5. 값이 반복될 때 줄여서 표현할 수 있는 함수 : repeat()
    1) px이나 fr 단위를 사용하면 똑같은 값을 여러 번 반복해야 하는 경우가 있는데 그럴 때 repeat 함수를 사용하여 간단하게 표현할 수 있음
        - 예) grid-template-columns: 1fr 1fr 1fr
                => grid-template-columns: repeat(3, 1fr)

6. 최소값과 최대값을 지정하는 함수 : minmax()

7. 비어있는 공간을 자동으로 채우는 속성 : auto-fit, auto-fill
    1) 한 행에 열을 몇 개 배치할 지 개수를 지정해야 함
    2) 개수를 처음부터 고정할 수 없거나 매번 지정하는 것이 번거로움
    3) auto-fit
        - 그리드 컨테이너 너비를 가득 채우도록 그리드 항목을 확장시킴
    4) auto-fill
        - 예) 그리드 항목 너비를 지정한 크기인 100px만큼만 유지하고 남는 공간이 있을 경우 그대로 유지시킴.

8. 그리드 항목 간격 조절하는 속성
    1) 그리드 항목을 배치할 때 간격을 따로 지정하지 않으면 항목들끼리 서로 붙음
    2) gap 속성에 값 1개일 때
        - 열 간격, 행 간격 똑같이 사용함
    3) gap 속성에 값 2개일 때
        - 첫번째 값은 행 간격(row-gap)
        - 두번째 값은 열 간격(column-gap)

9. 그리드 라인 사용해 배치하기
    1) 사용하는 속성
        - grid-column-start : 열의 시작 번호 지정
        - grid-column-end : 열의 끝 번호 지정
        - grid-column
            - 열의 시작과 끝 번호 함께 지정
            - 예) grid-column: 1 / 4; => 시작 번호 1, 끝 번호 4
            
        - grid-row-start : 행의 시작 번호 지정
        - grid-row-end : 행의 끝 번호 지정
        - grid-row
            - 행의 시작과 끝 번호 함께 지정
            - 예) grid-row: 2 / 4; => 시작 번호 2, 끝 번호 4
        